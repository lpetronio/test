var polygenicScoreVisualExplainer=function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=17)}({0:function(t,e,n){var r,i;
/*!
 * ScrollMagic v2.0.7 (2019-05-07)
 * The javascript library for magical scroll interactions.
 * (c) 2019 Jan Paepke (@janpaepke)
 * Project Website: http://scrollmagic.io
 * 
 * @version 2.0.7
 * @license Dual licensed under MIT license and GPL.
 * @author Jan Paepke - e-mail@janpaepke.de
 *
 * @file ScrollMagic main library.
 */void 0===(i="function"==typeof(r=function(){"use strict";var t=function(){r.log(2,"(COMPATIBILITY NOTICE) -> As of ScrollMagic 2.0.0 you need to use 'new ScrollMagic.Controller()' to create a new controller instance. Use 'new ScrollMagic.Scene()' to instance a scene.")};t.version="2.0.7",window.addEventListener("mousewheel",(function(){})),t.Controller=function(n){var i,o,a="ScrollMagic.Controller",s=e.defaults,l=this,u=r.extend({},s,n),c=[],f=!1,h=0,p="PAUSED",d=!0,g=0,y=!0,v=function(){u.refreshInterval>0&&(o=window.setTimeout(C,u.refreshInterval))},m=function(){return u.vertical?r.get.scrollTop(u.container):r.get.scrollLeft(u.container)},w=function(){return u.vertical?r.get.height(u.container):r.get.width(u.container)},_=this._setScrollPos=function(t){u.vertical?d?window.scrollTo(r.get.scrollLeft(),t):u.container.scrollTop=t:d?window.scrollTo(t,r.get.scrollTop()):u.container.scrollLeft=t},x=function(){if(y&&f){var t=r.type.Array(f)?f:c.slice(0);f=!1;var e=h,n=(h=l.scrollPos())-e;0!==n&&(p=n>0?"FORWARD":"REVERSE"),"REVERSE"===p&&t.reverse(),t.forEach((function(e,n){I(3,"updating Scene "+(n+1)+"/"+t.length+" ("+c.length+" total)"),e.update(!0)})),0===t.length&&u.loglevel>=3&&I(3,"updating 0 Scenes (nothing added to controller)")}},b=function(){i=r.rAF(x)},M=function(t){I(3,"event fired causing an update:",t.type),"resize"==t.type&&(g=w(),p="PAUSED"),!0!==f&&(f=!0,b())},C=function(){if(!d&&g!=w()){var t;try{t=new Event("resize",{bubbles:!1,cancelable:!1})}catch(e){(t=document.createEvent("Event")).initEvent("resize",!1,!1)}u.container.dispatchEvent(t)}c.forEach((function(t,e){t.refresh()})),v()},I=this._log=function(t,e){u.loglevel>=t&&(Array.prototype.splice.call(arguments,1,0,"("+a+") ->"),r.log.apply(window,arguments))};this._options=u;var T=function(t){if(t.length<=1)return t;var e=t.slice(0);return e.sort((function(t,e){return t.scrollOffset()>e.scrollOffset()?1:-1})),e};return this.addScene=function(e){if(r.type.Array(e))e.forEach((function(t,e){l.addScene(t)}));else if(e instanceof t.Scene){if(e.controller()!==l)e.addTo(l);else if(c.indexOf(e)<0){for(var n in c.push(e),c=T(c),e.on("shift.controller_sort",(function(){c=T(c)})),u.globalSceneOptions)e[n]&&e[n].call(e,u.globalSceneOptions[n]);I(3,"adding Scene (now "+c.length+" total)")}}else I(1,"ERROR: invalid argument supplied for '.addScene()'");return l},this.removeScene=function(t){if(r.type.Array(t))t.forEach((function(t,e){l.removeScene(t)}));else{var e=c.indexOf(t);e>-1&&(t.off("shift.controller_sort"),c.splice(e,1),I(3,"removing Scene (now "+c.length+" left)"),t.remove())}return l},this.updateScene=function(e,n){return r.type.Array(e)?e.forEach((function(t,e){l.updateScene(t,n)})):n?e.update(!0):!0!==f&&e instanceof t.Scene&&(-1==(f=f||[]).indexOf(e)&&f.push(e),f=T(f),b()),l},this.update=function(t){return M({type:"resize"}),t&&x(),l},this.scrollTo=function(e,n){if(r.type.Number(e))_.call(u.container,e,n);else if(e instanceof t.Scene)e.controller()===l?l.scrollTo(e.scrollOffset(),n):I(2,"scrollTo(): The supplied scene does not belong to this controller. Scroll cancelled.",e);else if(r.type.Function(e))_=e;else{var i=r.get.elements(e)[0];if(i){for(;i.parentNode.hasAttribute("data-scrollmagic-pin-spacer");)i=i.parentNode;var o=u.vertical?"top":"left",a=r.get.offset(u.container),s=r.get.offset(i);d||(a[o]-=l.scrollPos()),l.scrollTo(s[o]-a[o],n)}else I(2,"scrollTo(): The supplied argument is invalid. Scroll cancelled.",e)}return l},this.scrollPos=function(t){return arguments.length?(r.type.Function(t)?m=t:I(2,"Provided value for method 'scrollPos' is not a function. To change the current scroll position use 'scrollTo()'."),l):m.call(l)},this.info=function(t){var e={size:g,vertical:u.vertical,scrollPos:h,scrollDirection:p,container:u.container,isDocument:d};return arguments.length?void 0!==e[t]?e[t]:void I(1,'ERROR: option "'+t+'" is not available'):e},this.loglevel=function(t){return arguments.length?(u.loglevel!=t&&(u.loglevel=t),l):u.loglevel},this.enabled=function(t){return arguments.length?(y!=t&&(y=!!t,l.updateScene(c,!0)),l):y},this.destroy=function(t){window.clearTimeout(o);for(var e=c.length;e--;)c[e].destroy(t);return u.container.removeEventListener("resize",M),u.container.removeEventListener("scroll",M),r.cAF(i),I(3,"destroyed "+a+" (reset: "+(t?"true":"false")+")"),null},function(){for(var e in u)s.hasOwnProperty(e)||(I(2,'WARNING: Unknown option "'+e+'"'),delete u[e]);if(u.container=r.get.elements(u.container)[0],!u.container)throw I(1,"ERROR creating object "+a+": No valid scroll container supplied"),a+" init failed.";(d=u.container===window||u.container===document.body||!document.body.contains(u.container))&&(u.container=window),g=w(),u.container.addEventListener("resize",M),u.container.addEventListener("scroll",M);var n=parseInt(u.refreshInterval,10);u.refreshInterval=r.type.Number(n)?n:s.refreshInterval,v(),I(3,"added new "+a+" controller (v"+t.version+")")}(),l};var e={defaults:{container:window,vertical:!0,globalSceneOptions:{},loglevel:2,refreshInterval:100}};t.Controller.addOption=function(t,n){e.defaults[t]=n},t.Controller.extend=function(e){var n=this;t.Controller=function(){return n.apply(this,arguments),this.$super=r.extend({},this),e.apply(this,arguments)||this},r.extend(t.Controller,n),t.Controller.prototype=n.prototype,t.Controller.prototype.constructor=t.Controller},t.Scene=function(e){var i,o,a="ScrollMagic.Scene",s=n.defaults,l=this,u=r.extend({},s,e),c="BEFORE",f=0,h={start:0,end:0},p=0,d=!0,g={};this.on=function(t,e){return r.type.Function(e)?(t=t.trim().split(" ")).forEach((function(t){var n=t.split("."),r=n[0],i=n[1];"*"!=r&&(g[r]||(g[r]=[]),g[r].push({namespace:i||"",callback:e}))})):y(1,"ERROR when calling '.on()': Supplied callback for '"+t+"' is not a valid function!"),l},this.off=function(t,e){return t?((t=t.trim().split(" ")).forEach((function(t,n){var r=t.split("."),i=r[0],o=r[1]||"";("*"===i?Object.keys(g):[i]).forEach((function(t){for(var n=g[t]||[],r=n.length;r--;){var i=n[r];!i||o!==i.namespace&&"*"!==o||e&&e!=i.callback||n.splice(r,1)}n.length||delete g[t]}))})),l):(y(1,"ERROR: Invalid event name supplied."),l)},this.trigger=function(e,n){if(e){var r=e.trim().split("."),i=r[0],o=r[1],a=g[i];y(3,"event fired:",i,n?"->":"",n||""),a&&a.forEach((function(e,r){o&&o!==e.namespace||e.callback.call(l,new t.Event(i,e.namespace,l,n))}))}else y(1,"ERROR: Invalid event name supplied.");return l},l.on("change.internal",(function(t){"loglevel"!==t.what&&"tweenChanges"!==t.what&&("triggerElement"===t.what?x():"reverse"===t.what&&l.update())})).on("shift.internal",(function(t){w(),l.update()}));var y=this._log=function(t,e){u.loglevel>=t&&(Array.prototype.splice.call(arguments,1,0,"("+a+") ->"),r.log.apply(window,arguments))};this.addTo=function(e){return e instanceof t.Controller?o!=e&&(o&&o.removeScene(l),o=e,C(),_(!0),x(!0),w(),o.info("container").addEventListener("resize",b),e.addScene(l),l.trigger("add",{controller:o}),y(3,"added "+a+" to controller"),l.update()):y(1,"ERROR: supplied argument of 'addTo()' is not a valid ScrollMagic Controller"),l},this.enabled=function(t){return arguments.length?(d!=t&&(d=!!t,l.update(!0)),l):d},this.remove=function(){if(o){o.info("container").removeEventListener("resize",b);var t=o;o=void 0,t.removeScene(l),l.trigger("remove"),y(3,"removed "+a+" from controller")}return l},this.destroy=function(t){return l.trigger("destroy",{reset:t}),l.remove(),l.off("*.*"),y(3,"destroyed "+a+" (reset: "+(t?"true":"false")+")"),null},this.update=function(t){if(o)if(t)if(o.enabled()&&d){var e,n=o.info("scrollPos");e=u.duration>0?(n-h.start)/(h.end-h.start):n>=h.start?1:0,l.trigger("update",{startPos:h.start,endPos:h.end,scrollPos:n}),l.progress(e)}else v&&"DURING"===c&&k(!0);else o.updateScene(l,!1);return l},this.refresh=function(){return _(),x(),l},this.progress=function(t){if(arguments.length){var e=!1,n=c,r=o?o.info("scrollDirection"):"PAUSED",i=u.reverse||t>=f;if(0===u.duration?(e=f!=t,c=0==(f=t<1&&i?0:1)?"BEFORE":"DURING"):t<0&&"BEFORE"!==c&&i?(f=0,c="BEFORE",e=!0):t>=0&&t<1&&i?(f=t,c="DURING",e=!0):t>=1&&"AFTER"!==c?(f=1,c="AFTER",e=!0):"DURING"!==c||i||k(),e){var a={progress:f,state:c,scrollDirection:r},s=c!=n,h=function(t){l.trigger(t,a)};s&&"DURING"!==n&&(h("enter"),h("BEFORE"===n?"start":"end")),h("progress"),s&&"DURING"!==c&&(h("BEFORE"===c?"start":"end"),h("leave"))}return l}return f};var v,m,w=function(){h={start:p+u.offset},o&&u.triggerElement&&(h.start-=o.info("size")*u.triggerHook),h.end=h.start+u.duration},_=function(t){i&&I("duration",i.call(l))&&!t&&(l.trigger("change",{what:"duration",newval:u.duration}),l.trigger("shift",{reason:"duration"}))},x=function(t){var e=0,n=u.triggerElement;if(o&&(n||p>0)){if(n)if(n.parentNode){for(var i=o.info(),a=r.get.offset(i.container),s=i.vertical?"top":"left";n.parentNode.hasAttribute("data-scrollmagic-pin-spacer");)n=n.parentNode;var c=r.get.offset(n);i.isDocument||(a[s]-=o.scrollPos()),e=c[s]-a[s]}else y(2,"WARNING: triggerElement was removed from DOM and will be reset to",void 0),l.triggerElement(void 0);var f=e!=p;p=e,f&&!t&&l.trigger("shift",{reason:"triggerElementPosition"})}},b=function(t){u.triggerHook>0&&l.trigger("shift",{reason:"containerResize"})},M=r.extend(n.validate,{duration:function(t){if(r.type.String(t)&&t.match(/^(\.|\d)*\d+%$/)){var e=parseFloat(t)/100;t=function(){return o?o.info("size")*e:0}}if(r.type.Function(t)){i=t;try{t=parseFloat(i.call(l))}catch(e){t=-1}}if(t=parseFloat(t),!r.type.Number(t)||t<0)throw i?(i=void 0,['Invalid return value of supplied function for option "duration":',t]):['Invalid value for option "duration":',t];return t}}),C=function(t){(t=arguments.length?[t]:Object.keys(M)).forEach((function(t,e){var n;if(M[t])try{n=M[t](u[t])}catch(e){n=s[t];var i=r.type.String(e)?[e]:e;r.type.Array(i)?(i[0]="ERROR: "+i[0],i.unshift(1),y.apply(this,i)):y(1,"ERROR: Problem executing validation callback for option '"+t+"':",e.message)}finally{u[t]=n}}))},I=function(t,e){var n=!1,r=u[t];return u[t]!=e&&(u[t]=e,C(t),n=r!=u[t]),n},T=function(t){l[t]||(l[t]=function(e){return arguments.length?("duration"===t&&(i=void 0),I(t,e)&&(l.trigger("change",{what:t,newval:u[t]}),n.shifts.indexOf(t)>-1&&l.trigger("shift",{reason:t})),l):u[t]})};this.controller=function(){return o},this.state=function(){return c},this.scrollOffset=function(){return h.start},this.triggerPosition=function(){var t=u.offset;return o&&(u.triggerElement?t+=p:t+=o.info("size")*l.triggerHook()),t},l.on("shift.internal",(function(t){var e="duration"===t.reason;("AFTER"===c&&e||"DURING"===c&&0===u.duration)&&k(),e&&A()})).on("progress.internal",(function(t){k()})).on("add.internal",(function(t){A()})).on("destroy.internal",(function(t){l.removePin(t.reset)}));var k=function(t){if(v&&o){var e=o.info(),n=m.spacer.firstChild;if(t||"DURING"!==c){var i={position:m.inFlow?"relative":"absolute",top:0,left:0},a=r.css(n,"position")!=i.position;m.pushFollowers?u.duration>0&&("AFTER"===c&&0===parseFloat(r.css(m.spacer,"padding-top"))||"BEFORE"===c&&0===parseFloat(r.css(m.spacer,"padding-bottom")))&&(a=!0):i[e.vertical?"top":"left"]=u.duration*f,r.css(n,i),a&&A()}else{"fixed"!=r.css(n,"position")&&(r.css(n,{position:"fixed"}),A());var s=r.get.offset(m.spacer,!0),l=u.reverse||0===u.duration?e.scrollPos-h.start:Math.round(f*u.duration*10)/10;s[e.vertical?"top":"left"]+=l,r.css(m.spacer.firstChild,{top:s.top,left:s.left})}}},A=function(){if(v&&o&&m.inFlow){var t="DURING"===c,e=o.info("vertical"),n=m.spacer.firstChild,i=r.isMarginCollapseType(r.css(m.spacer,"display")),a={};m.relSize.width||m.relSize.autoFullWidth?t?r.css(v,{width:r.get.width(m.spacer)}):r.css(v,{width:"100%"}):(a["min-width"]=r.get.width(e?v:n,!0,!0),a.width=t?a["min-width"]:"auto"),m.relSize.height?t?r.css(v,{height:r.get.height(m.spacer)-(m.pushFollowers?u.duration:0)}):r.css(v,{height:"100%"}):(a["min-height"]=r.get.height(e?n:v,!0,!i),a.height=t?a["min-height"]:"auto"),m.pushFollowers&&(a["padding"+(e?"Top":"Left")]=u.duration*f,a["padding"+(e?"Bottom":"Right")]=u.duration*(1-f)),r.css(m.spacer,a)}},E=function(){o&&v&&"DURING"===c&&!o.info("isDocument")&&k()},$=function(){o&&v&&"DURING"===c&&((m.relSize.width||m.relSize.autoFullWidth)&&r.get.width(window)!=r.get.width(m.spacer.parentNode)||m.relSize.height&&r.get.height(window)!=r.get.height(m.spacer.parentNode))&&A()},S=function(t){o&&v&&"DURING"===c&&!o.info("isDocument")&&(t.preventDefault(),o._setScrollPos(o.info("scrollPos")-((t.wheelDelta||t[o.info("vertical")?"wheelDeltaY":"wheelDeltaX"])/3||30*-t.detail)))};this.setPin=function(t,e){var n=e&&e.hasOwnProperty("pushFollowers");if(e=r.extend({},{pushFollowers:!0,spacerClass:"scrollmagic-pin-spacer"},e),!(t=r.get.elements(t)[0]))return y(1,"ERROR calling method 'setPin()': Invalid pin element supplied."),l;if("fixed"===r.css(t,"position"))return y(1,"ERROR calling method 'setPin()': Pin does not work with elements that are positioned 'fixed'."),l;if(v){if(v===t)return l;l.removePin()}var i=(v=t).parentNode.style.display,o=["top","left","bottom","right","margin","marginLeft","marginRight","marginTop","marginBottom"];v.parentNode.style.display="none";var a="absolute"!=r.css(v,"position"),s=r.css(v,o.concat(["display"])),c=r.css(v,["width","height"]);v.parentNode.style.display=i,!a&&e.pushFollowers&&(y(2,"WARNING: If the pinned element is positioned absolutely pushFollowers will be disabled."),e.pushFollowers=!1),window.setTimeout((function(){v&&0===u.duration&&n&&e.pushFollowers&&y(2,"WARNING: pushFollowers =",!0,"has no effect, when scene duration is 0.")}),0);var f=v.parentNode.insertBefore(document.createElement("div"),v),h=r.extend(s,{position:a?"relative":"absolute",boxSizing:"content-box",mozBoxSizing:"content-box",webkitBoxSizing:"content-box"});if(a||r.extend(h,r.css(v,["width","height"])),r.css(f,h),f.setAttribute("data-scrollmagic-pin-spacer",""),r.addClass(f,e.spacerClass),m={spacer:f,relSize:{width:"%"===c.width.slice(-1),height:"%"===c.height.slice(-1),autoFullWidth:"auto"===c.width&&a&&r.isMarginCollapseType(s.display)},pushFollowers:e.pushFollowers,inFlow:a},!v.___origStyle){v.___origStyle={};var p=v.style;o.concat(["width","height","position","boxSizing","mozBoxSizing","webkitBoxSizing"]).forEach((function(t){v.___origStyle[t]=p[t]||""}))}return m.relSize.width&&r.css(f,{width:c.width}),m.relSize.height&&r.css(f,{height:c.height}),f.appendChild(v),r.css(v,{position:a?"relative":"absolute",margin:"auto",top:"auto",left:"auto",bottom:"auto",right:"auto"}),(m.relSize.width||m.relSize.autoFullWidth)&&r.css(v,{boxSizing:"border-box",mozBoxSizing:"border-box",webkitBoxSizing:"border-box"}),window.addEventListener("scroll",E),window.addEventListener("resize",E),window.addEventListener("resize",$),v.addEventListener("mousewheel",S),v.addEventListener("DOMMouseScroll",S),y(3,"added pin"),k(),l},this.removePin=function(t){if(v){if("DURING"===c&&k(!0),t||!o){var e=m.spacer.firstChild;if(e.hasAttribute("data-scrollmagic-pin-spacer")){var n=m.spacer.style,i={};["margin","marginLeft","marginRight","marginTop","marginBottom"].forEach((function(t){i[t]=n[t]||""})),r.css(e,i)}m.spacer.parentNode.insertBefore(e,m.spacer),m.spacer.parentNode.removeChild(m.spacer),v.parentNode.hasAttribute("data-scrollmagic-pin-spacer")||(r.css(v,v.___origStyle),delete v.___origStyle)}window.removeEventListener("scroll",E),window.removeEventListener("resize",E),window.removeEventListener("resize",$),v.removeEventListener("mousewheel",S),v.removeEventListener("DOMMouseScroll",S),v=void 0,y(3,"removed pin (reset: "+(t?"true":"false")+")")}return l};var N,R=[];return l.on("destroy.internal",(function(t){l.removeClassToggle(t.reset)})),this.setClassToggle=function(t,e){var n=r.get.elements(t);return 0!==n.length&&r.type.String(e)?(R.length>0&&l.removeClassToggle(),N=e,R=n,l.on("enter.internal_class leave.internal_class",(function(t){var e="enter"===t.type?r.addClass:r.removeClass;R.forEach((function(t,n){e(t,N)}))})),l):(y(1,"ERROR calling method 'setClassToggle()': Invalid "+(0===n.length?"element":"classes")+" supplied."),l)},this.removeClassToggle=function(t){return t&&R.forEach((function(t,e){r.removeClass(t,N)})),l.off("start.internal_class end.internal_class"),N=void 0,R=[],l},function(){for(var t in u)s.hasOwnProperty(t)||(y(2,'WARNING: Unknown option "'+t+'"'),delete u[t]);for(var e in s)T(e);C()}(),l};var n={defaults:{duration:0,offset:0,triggerElement:void 0,triggerHook:.5,reverse:!0,loglevel:2},validate:{offset:function(t){if(t=parseFloat(t),!r.type.Number(t))throw['Invalid value for option "offset":',t];return t},triggerElement:function(t){if(t=t||void 0){var e=r.get.elements(t)[0];if(!e||!e.parentNode)throw['Element defined in option "triggerElement" was not found:',t];t=e}return t},triggerHook:function(t){var e={onCenter:.5,onEnter:1,onLeave:0};if(r.type.Number(t))t=Math.max(0,Math.min(parseFloat(t),1));else{if(!(t in e))throw['Invalid value for option "triggerHook": ',t];t=e[t]}return t},reverse:function(t){return!!t},loglevel:function(t){if(t=parseInt(t),!r.type.Number(t)||t<0||t>3)throw['Invalid value for option "loglevel":',t];return t}},shifts:["duration","offset","triggerHook"]};t.Scene.addOption=function(e,r,i,o){e in n.defaults?t._util.log(1,"[static] ScrollMagic.Scene -> Cannot add Scene option '"+e+"', because it already exists."):(n.defaults[e]=r,n.validate[e]=i,o&&n.shifts.push(e))},t.Scene.extend=function(e){var n=this;t.Scene=function(){return n.apply(this,arguments),this.$super=r.extend({},this),e.apply(this,arguments)||this},r.extend(t.Scene,n),t.Scene.prototype=n.prototype,t.Scene.prototype.constructor=t.Scene},t.Event=function(t,e,n,r){for(var i in r=r||{})this[i]=r[i];return this.type=t,this.target=this.currentTarget=n,this.namespace=e||"",this.timeStamp=this.timestamp=Date.now(),this};var r=t._util=function(t){var e,n={},r=function(t){return parseFloat(t)||0},i=function(e){return e.currentStyle?e.currentStyle:t.getComputedStyle(e)},o=function(e,n,o,a){if((n=n===document?t:n)===t)a=!1;else if(!d.DomElement(n))return 0;e=e.charAt(0).toUpperCase()+e.substr(1).toLowerCase();var s=(o?n["offset"+e]||n["outer"+e]:n["client"+e]||n["inner"+e])||0;if(o&&a){var l=i(n);s+="Height"===e?r(l.marginTop)+r(l.marginBottom):r(l.marginLeft)+r(l.marginRight)}return s},a=function(t){return t.replace(/^[^a-z]+([a-z])/g,"$1").replace(/-([a-z])/g,(function(t){return t[1].toUpperCase()}))};n.extend=function(t){for(t=t||{},e=1;e<arguments.length;e++)if(arguments[e])for(var n in arguments[e])arguments[e].hasOwnProperty(n)&&(t[n]=arguments[e][n]);return t},n.isMarginCollapseType=function(t){return["block","flex","list-item","table","-webkit-box"].indexOf(t)>-1};var s=0,l=["ms","moz","webkit","o"],u=t.requestAnimationFrame,c=t.cancelAnimationFrame;for(e=0;!u&&e<l.length;++e)u=t[l[e]+"RequestAnimationFrame"],c=t[l[e]+"CancelAnimationFrame"]||t[l[e]+"CancelRequestAnimationFrame"];u||(u=function(e){var n=(new Date).getTime(),r=Math.max(0,16-(n-s)),i=t.setTimeout((function(){e(n+r)}),r);return s=n+r,i}),c||(c=function(e){t.clearTimeout(e)}),n.rAF=u.bind(t),n.cAF=c.bind(t);var f=["error","warn","log"],h=t.console||{};for(h.log=h.log||function(){},e=0;e<f.length;e++){var p=f[e];h[p]||(h[p]=h.log)}n.log=function(t){(t>f.length||t<=0)&&(t=f.length);var e=new Date,n=("0"+e.getHours()).slice(-2)+":"+("0"+e.getMinutes()).slice(-2)+":"+("0"+e.getSeconds()).slice(-2)+":"+("00"+e.getMilliseconds()).slice(-3),r=f[t-1],i=Array.prototype.splice.call(arguments,1),o=Function.prototype.bind.call(h[r],h);i.unshift(n),o.apply(h,i)};var d=n.type=function(t){return Object.prototype.toString.call(t).replace(/^\[object (.+)\]$/,"$1").toLowerCase()};d.String=function(t){return"string"===d(t)},d.Function=function(t){return"function"===d(t)},d.Array=function(t){return Array.isArray(t)},d.Number=function(t){return!d.Array(t)&&t-parseFloat(t)+1>=0},d.DomElement=function(t){return"object"==typeof HTMLElement||"function"==typeof HTMLElement?t instanceof HTMLElement||t instanceof SVGElement:t&&"object"==typeof t&&null!==t&&1===t.nodeType&&"string"==typeof t.nodeName};var g=n.get={};return g.elements=function(e){var n=[];if(d.String(e))try{e=document.querySelectorAll(e)}catch(t){return n}if("nodelist"===d(e)||d.Array(e)||e instanceof NodeList)for(var r=0,i=n.length=e.length;r<i;r++){var o=e[r];n[r]=d.DomElement(o)?o:g.elements(o)}else(d.DomElement(e)||e===document||e===t)&&(n=[e]);return n},g.scrollTop=function(e){return e&&"number"==typeof e.scrollTop?e.scrollTop:t.pageYOffset||0},g.scrollLeft=function(e){return e&&"number"==typeof e.scrollLeft?e.scrollLeft:t.pageXOffset||0},g.width=function(t,e,n){return o("width",t,e,n)},g.height=function(t,e,n){return o("height",t,e,n)},g.offset=function(t,e){var n={top:0,left:0};if(t&&t.getBoundingClientRect){var r=t.getBoundingClientRect();n.top=r.top,n.left=r.left,e||(n.top+=g.scrollTop(),n.left+=g.scrollLeft())}return n},n.addClass=function(t,e){e&&(t.classList?t.classList.add(e):t.className+=" "+e)},n.removeClass=function(t,e){e&&(t.classList?t.classList.remove(e):t.className=t.className.replace(new RegExp("(^|\\b)"+e.split(" ").join("|")+"(\\b|$)","gi")," "))},n.css=function(t,e){if(d.String(e))return i(t)[a(e)];if(d.Array(e)){var n={},r=i(t);return e.forEach((function(t,e){n[t]=r[a(t)]})),n}for(var o in e){var s=e[o];s==parseFloat(s)&&(s+="px"),t.style[a(o)]=s}},n}(window||{});return t.Scene.prototype.addIndicators=function(){return t._util.log(1,"(ScrollMagic.Scene) -> ERROR calling addIndicators() due to missing Plugin 'debug.addIndicators'. Please make sure to include plugins/debug.addIndicators.js"),this},t.Scene.prototype.removeIndicators=function(){return t._util.log(1,"(ScrollMagic.Scene) -> ERROR calling removeIndicators() due to missing Plugin 'debug.addIndicators'. Please make sure to include plugins/debug.addIndicators.js"),this},t.Scene.prototype.setTween=function(){return t._util.log(1,"(ScrollMagic.Scene) -> ERROR calling setTween() due to missing Plugin 'animation.gsap'. Please make sure to include plugins/animation.gsap.js"),this},t.Scene.prototype.removeTween=function(){return t._util.log(1,"(ScrollMagic.Scene) -> ERROR calling removeTween() due to missing Plugin 'animation.gsap'. Please make sure to include plugins/animation.gsap.js"),this},t.Scene.prototype.setVelocity=function(){return t._util.log(1,"(ScrollMagic.Scene) -> ERROR calling setVelocity() due to missing Plugin 'animation.velocity'. Please make sure to include plugins/animation.velocity.js"),this},t.Scene.prototype.removeVelocity=function(){return t._util.log(1,"(ScrollMagic.Scene) -> ERROR calling removeVelocity() due to missing Plugin 'animation.velocity'. Please make sure to include plugins/animation.velocity.js"),this},t})?r.call(e,n,e,t):r)||(t.exports=i)},17:function(t,e,n){const r=n(52);t.exports=r},52:function(t,e,n){"use strict";n.r(e);var r=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN},i=function(t){var e;return 1===t.length&&(e=t,t=function(t,n){return r(e(t),n)}),{left:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var o=r+i>>>1;t(e[o],n)<0?r=o+1:i=o}return r},right:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var o=r+i>>>1;t(e[o],n)>0?i=o:r=o+1}return r}}};var o=i(r),a=o.right,s=(o.left,a);var l=function(t){return null===t?NaN:+t},u=function(t,e){var n,r,i,o=t.length,a=-1;if(null==e){for(;++a<o;)if(null!=(n=t[a])&&n>=n)for(r=i=n;++a<o;)null!=(n=t[a])&&(r>n&&(r=n),i<n&&(i=n))}else for(;++a<o;)if(null!=(n=e(t[a],a,t))&&n>=n)for(r=i=n;++a<o;)null!=(n=e(t[a],a,t))&&(r>n&&(r=n),i<n&&(i=n));return[r,i]},c=Array.prototype,f=(c.slice,c.map,function(t,e,n){t=+t,e=+e,n=(i=arguments.length)<2?(e=t,t=0,1):i<3?1:+n;for(var r=-1,i=0|Math.max(0,Math.ceil((e-t)/n)),o=new Array(i);++r<i;)o[r]=t+r*n;return o}),h=Math.sqrt(50),p=Math.sqrt(10),d=Math.sqrt(2),g=function(t,e,n){var r,i,o,a,s=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((r=e<t)&&(i=t,t=e,e=i),0===(a=y(t,e,n))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),e=Math.floor(e/a),o=new Array(i=Math.ceil(e-t+1));++s<i;)o[s]=(t+s)*a;else for(t=Math.floor(t*a),e=Math.ceil(e*a),o=new Array(i=Math.ceil(t-e+1));++s<i;)o[s]=(t-s)/a;return r&&o.reverse(),o};function y(t,e,n){var r=(e-t)/Math.max(0,n),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=h?10:o>=p?5:o>=d?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=h?10:o>=p?5:o>=d?2:1)}function v(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=h?i*=10:o>=p?i*=5:o>=d&&(i*=2),e<t?-i:i}var m=function(t,e,n){if(null==n&&(n=l),r=t.length){if((e=+e)<=0||r<2)return+n(t[0],0,t);if(e>=1)return+n(t[r-1],r-1,t);var r,i=(r-1)*e,o=Math.floor(i),a=+n(t[o],o,t);return a+(+n(t[o+1],o+1,t)-a)*(i-o)}},w=function(t,e){var n,r,i=t.length,o=-1;if(null==e){for(;++o<i;)if(null!=(n=t[o])&&n>=n)for(r=n;++o<i;)null!=(n=t[o])&&n>r&&(r=n)}else for(;++o<i;)if(null!=(n=e(t[o],o,t))&&n>=n)for(r=n;++o<i;)null!=(n=e(t[o],o,t))&&n>r&&(r=n);return r},_=function(t,e){var n,i=t.length,o=-1,a=[];if(null==e)for(;++o<i;)isNaN(n=l(t[o]))||a.push(n);else for(;++o<i;)isNaN(n=l(e(t[o],o,t)))||a.push(n);return m(a.sort(r),.5)};Array.prototype.slice;var x={value:function(){}};function b(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new M(r)}function M(t){this._=t}function C(t,e){return t.trim().split(/^|\s+/).map((function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))}function I(t,e){for(var n,r=0,i=t.length;r<i;++r)if((n=t[r]).name===e)return n.value}function T(t,e,n){for(var r=0,i=t.length;r<i;++r)if(t[r].name===e){t[r]=x,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}M.prototype=b.prototype={constructor:M,on:function(t,e){var n,r=this._,i=C(t+"",r),o=-1,a=i.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++o<a;)if(n=(t=i[o]).type)r[n]=T(r[n],t.name,e);else if(null==e)for(n in r)r[n]=T(r[n],t.name,null);return this}for(;++o<a;)if((n=(t=i[o]).type)&&(n=I(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new M(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),o=0;o<n;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,n=(r=this._[t]).length;o<n;++o)r[o].value.apply(e,i)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(e,n)}};var k=b;function A(){}var E=function(t){return null==t?A:function(){return this.querySelector(t)}};function $(){return[]}var S=function(t){return null==t?$:function(){return this.querySelectorAll(t)}},N=function(t){return function(){return this.matches(t)}},R=function(t){return new Array(t.length)};function D(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}D.prototype={constructor:D,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};function U(t,e,n,r,i,o){for(var a,s=0,l=e.length,u=o.length;s<u;++s)(a=e[s])?(a.__data__=o[s],r[s]=a):n[s]=new D(t,o[s]);for(;s<l;++s)(a=e[s])&&(i[s]=a)}function L(t,e,n,r,i,o,a){var s,l,u,c={},f=e.length,h=o.length,p=new Array(f);for(s=0;s<f;++s)(l=e[s])&&(p[s]=u="$"+a.call(l,l.__data__,s,e),u in c?i[s]=l:c[u]=l);for(s=0;s<h;++s)(l=c[u="$"+a.call(t,o[s],s,o)])?(r[s]=l,l.__data__=o[s],c[u]=null):n[s]=new D(t,o[s]);for(s=0;s<f;++s)(l=e[s])&&c[p[s]]===l&&(i[s]=l)}function P(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}var z="http://www.w3.org/1999/xhtml",F={svg:"http://www.w3.org/2000/svg",xhtml:z,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},H=function(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),F.hasOwnProperty(e)?{space:F[e],local:t}:t};function O(t){return function(){this.removeAttribute(t)}}function q(t){return function(){this.removeAttributeNS(t.space,t.local)}}function W(t,e){return function(){this.setAttribute(t,e)}}function B(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function Y(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function j(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}var X=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function V(t){return function(){this.style.removeProperty(t)}}function G(t,e,n){return function(){this.style.setProperty(t,e,n)}}function Z(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function Q(t,e){return t.style.getPropertyValue(e)||X(t).getComputedStyle(t,null).getPropertyValue(e)}function J(t){return function(){delete this[t]}}function K(t,e){return function(){this[t]=e}}function tt(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function et(t){return t.trim().split(/^|\s+/)}function nt(t){return t.classList||new rt(t)}function rt(t){this._node=t,this._names=et(t.getAttribute("class")||"")}function it(t,e){for(var n=nt(t),r=-1,i=e.length;++r<i;)n.add(e[r])}function ot(t,e){for(var n=nt(t),r=-1,i=e.length;++r<i;)n.remove(e[r])}function at(t){return function(){it(this,t)}}function st(t){return function(){ot(this,t)}}function lt(t,e){return function(){(e.apply(this,arguments)?it:ot)(this,t)}}rt.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function ut(){this.textContent=""}function ct(t){return function(){this.textContent=t}}function ft(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function ht(){this.innerHTML=""}function pt(t){return function(){this.innerHTML=t}}function dt(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function gt(){this.nextSibling&&this.parentNode.appendChild(this)}function yt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function vt(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===z&&e.documentElement.namespaceURI===z?e.createElement(t):e.createElementNS(n,t)}}function mt(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var wt=function(t){var e=H(t);return(e.local?mt:vt)(e)};function _t(){return null}function xt(){var t=this.parentNode;t&&t.removeChild(this)}function bt(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function Mt(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}var Ct={},It=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(Ct={mouseenter:"mouseover",mouseleave:"mouseout"}));function Tt(t,e,n){return t=kt(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function kt(t,e,n){return function(r){var i=It;It=r;try{t.call(this,this.__data__,e,n)}finally{It=i}}}function At(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}function Et(t){return function(){var e=this.__on;if(e){for(var n,r=0,i=-1,o=e.length;r<o;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++i]=n:this.removeEventListener(n.type,n.listener,n.capture);++i?e.length=i:delete this.__on}}}function $t(t,e,n){var r=Ct.hasOwnProperty(t.type)?Tt:kt;return function(i,o,a){var s,l=this.__on,u=r(e,o,a);if(l)for(var c=0,f=l.length;c<f;++c)if((s=l[c]).type===t.type&&s.name===t.name)return this.removeEventListener(s.type,s.listener,s.capture),this.addEventListener(s.type,s.listener=u,s.capture=n),void(s.value=e);this.addEventListener(t.type,u,n),s={type:t.type,name:t.name,value:e,listener:u,capture:n},l?l.push(s):this.__on=[s]}}function St(t,e,n){var r=X(t),i=r.CustomEvent;"function"==typeof i?i=new i(e,n):(i=r.document.createEvent("Event"),n?(i.initEvent(e,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(e,!1,!1)),t.dispatchEvent(i)}function Nt(t,e){return function(){return St(this,t,e)}}function Rt(t,e){return function(){return St(this,t,e.apply(this,arguments))}}var Dt=[null];function Ut(t,e){this._groups=t,this._parents=e}function Lt(){return new Ut([[document.documentElement]],Dt)}Ut.prototype=Lt.prototype={constructor:Ut,select:function(t){"function"!=typeof t&&(t=E(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a,s=e[i],l=s.length,u=r[i]=new Array(l),c=0;c<l;++c)(o=s[c])&&(a=t.call(o,o.__data__,c,s))&&("__data__"in o&&(a.__data__=o.__data__),u[c]=a);return new Ut(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=S(t));for(var e=this._groups,n=e.length,r=[],i=[],o=0;o<n;++o)for(var a,s=e[o],l=s.length,u=0;u<l;++u)(a=s[u])&&(r.push(t.call(a,a.__data__,u,s)),i.push(a));return new Ut(r,i)},filter:function(t){"function"!=typeof t&&(t=N(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],s=a.length,l=r[i]=[],u=0;u<s;++u)(o=a[u])&&t.call(o,o.__data__,u,a)&&l.push(o);return new Ut(r,this._parents)},data:function(t,e){if(!t)return d=new Array(this.size()),c=-1,this.each((function(t){d[++c]=t})),d;var n,r=e?L:U,i=this._parents,o=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var a=o.length,s=new Array(a),l=new Array(a),u=new Array(a),c=0;c<a;++c){var f=i[c],h=o[c],p=h.length,d=t.call(f,f&&f.__data__,c,i),g=d.length,y=l[c]=new Array(g),v=s[c]=new Array(g);r(f,h,y,v,u[c]=new Array(p),d,e);for(var m,w,_=0,x=0;_<g;++_)if(m=y[_]){for(_>=x&&(x=_+1);!(w=v[x])&&++x<g;);m._next=w||null}}return(s=new Ut(s,i))._enter=l,s._exit=u,s},enter:function(){return new Ut(this._enter||this._groups.map(R),this._parents)},exit:function(){return new Ut(this._exit||this._groups.map(R),this._parents)},join:function(t,e,n){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=e&&(i=e(i)),null==n?o.remove():n(o),r&&i?r.merge(i).order():i},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var l,u=e[s],c=n[s],f=u.length,h=a[s]=new Array(f),p=0;p<f;++p)(l=u[p]||c[p])&&(h[p]=l);for(;s<r;++s)a[s]=e[s];return new Ut(a,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,i=t[e],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=P);for(var n=this._groups,r=n.length,i=new Array(r),o=0;o<r;++o){for(var a,s=n[o],l=s.length,u=i[o]=new Array(l),c=0;c<l;++c)(a=s[c])&&(u[c]=a);u.sort(e)}return new Ut(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each((function(){t[++e]=this})),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var i,o=e[n],a=0,s=o.length;a<s;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,e){var n=H(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?q:O:"function"==typeof e?n.local?j:Y:n.local?B:W)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?V:"function"==typeof e?Z:G)(t,e,null==n?"":n)):Q(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?J:"function"==typeof e?tt:K)(t,e)):this.node()[t]},classed:function(t,e){var n=et(t+"");if(arguments.length<2){for(var r=nt(this.node()),i=-1,o=n.length;++i<o;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof e?lt:e?at:st)(n,e))},text:function(t){return arguments.length?this.each(null==t?ut:("function"==typeof t?ft:ct)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?ht:("function"==typeof t?dt:pt)(t)):this.node().innerHTML},raise:function(){return this.each(gt)},lower:function(){return this.each(yt)},append:function(t){var e="function"==typeof t?t:wt(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:wt(t),r=null==e?_t:"function"==typeof e?e:E(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(xt)},clone:function(t){return this.select(t?Mt:bt)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,i,o=At(t+""),a=o.length;if(!(arguments.length<2)){for(s=e?$t:Et,null==n&&(n=!1),r=0;r<a;++r)this.each(s(o[r],e,n));return this}var s=this.node().__on;if(s)for(var l,u=0,c=s.length;u<c;++u)for(r=0,l=s[u];r<a;++r)if((i=o[r]).type===l.type&&i.name===l.name)return l.value},dispatch:function(t,e){return this.each(("function"==typeof e?Rt:Nt)(t,e))}};var Pt=Lt,zt=function(t){return"string"==typeof t?new Ut([[document.querySelector(t)]],[document.documentElement]):new Ut([[t]],Dt)};var Ft=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function Ht(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function Ot(){}var qt="\\s*([+-]?\\d+)\\s*",Wt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Bt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Yt=/^#([0-9a-f]{3,8})$/,jt=new RegExp("^rgb\\("+[qt,qt,qt]+"\\)$"),Xt=new RegExp("^rgb\\("+[Bt,Bt,Bt]+"\\)$"),Vt=new RegExp("^rgba\\("+[qt,qt,qt,Wt]+"\\)$"),Gt=new RegExp("^rgba\\("+[Bt,Bt,Bt,Wt]+"\\)$"),Zt=new RegExp("^hsl\\("+[Wt,Bt,Bt]+"\\)$"),Qt=new RegExp("^hsla\\("+[Wt,Bt,Bt,Wt]+"\\)$"),Jt={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Kt(){return this.rgb().formatHex()}function te(){return this.rgb().formatRgb()}function ee(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=Yt.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?ne(e):3===n?new ae(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?new ae(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?new ae(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=jt.exec(t))?new ae(e[1],e[2],e[3],1):(e=Xt.exec(t))?new ae(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=Vt.exec(t))?re(e[1],e[2],e[3],e[4]):(e=Gt.exec(t))?re(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=Zt.exec(t))?ce(e[1],e[2]/100,e[3]/100,1):(e=Qt.exec(t))?ce(e[1],e[2]/100,e[3]/100,e[4]):Jt.hasOwnProperty(t)?ne(Jt[t]):"transparent"===t?new ae(NaN,NaN,NaN,0):null}function ne(t){return new ae(t>>16&255,t>>8&255,255&t,1)}function re(t,e,n,r){return r<=0&&(t=e=n=NaN),new ae(t,e,n,r)}function ie(t){return t instanceof Ot||(t=ee(t)),t?new ae((t=t.rgb()).r,t.g,t.b,t.opacity):new ae}function oe(t,e,n,r){return 1===arguments.length?ie(t):new ae(t,e,n,null==r?1:r)}function ae(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function se(){return"#"+ue(this.r)+ue(this.g)+ue(this.b)}function le(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function ue(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function ce(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new he(t,e,n,r)}function fe(t){if(t instanceof he)return new he(t.h,t.s,t.l,t.opacity);if(t instanceof Ot||(t=ee(t)),!t)return new he;if(t instanceof he)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),o=Math.max(e,n,r),a=NaN,s=o-i,l=(o+i)/2;return s?(a=e===o?(n-r)/s+6*(n<r):n===o?(r-e)/s+2:(e-n)/s+4,s/=l<.5?o+i:2-o-i,a*=60):s=l>0&&l<1?0:a,new he(a,s,l,t.opacity)}function he(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function pe(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function de(t,e,n,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*e+(4-6*o+3*a)*n+(1+3*t+3*o-3*a)*r+a*i)/6}Ft(Ot,ee,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:Kt,formatHex:Kt,formatHsl:function(){return fe(this).formatHsl()},formatRgb:te,toString:te}),Ft(ae,oe,Ht(Ot,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new ae(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new ae(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:se,formatHex:se,formatRgb:le,toString:le})),Ft(he,(function(t,e,n,r){return 1===arguments.length?fe(t):new he(t,e,n,null==r?1:r)}),Ht(Ot,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new he(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new he(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new ae(pe(t>=240?t-240:t+120,i,r),pe(t,i,r),pe(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var ge=function(t){return function(){return t}};function ye(t,e){return function(n){return t+n*e}}function ve(t){return 1==(t=+t)?me:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):ge(isNaN(e)?n:e)}}function me(t,e){var n=e-t;return n?ye(t,n):ge(isNaN(t)?e:t)}var we=function t(e){var n=ve(e);function r(t,e){var r=n((t=oe(t)).r,(e=oe(e)).r),i=n(t.g,e.g),o=n(t.b,e.b),a=me(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=i(e),t.b=o(e),t.opacity=a(e),t+""}}return r.gamma=t,r}(1);function _e(t){return function(e){var n,r,i=e.length,o=new Array(i),a=new Array(i),s=new Array(i);for(n=0;n<i;++n)r=oe(e[n]),o[n]=r.r||0,a[n]=r.g||0,s[n]=r.b||0;return o=t(o),a=t(a),s=t(s),r.opacity=1,function(t){return r.r=o(t),r.g=a(t),r.b=s(t),r+""}}}_e((function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,s=r<e-1?t[r+2]:2*o-i;return de((n-r/e)*e,a,i,o,s)}})),_e((function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),i=t[(r+e-1)%e],o=t[r%e],a=t[(r+1)%e],s=t[(r+2)%e];return de((n-r/e)*e,i,o,a,s)}}));var xe=function(t,e){e||(e=[]);var n,r=t?Math.min(e.length,t.length):0,i=e.slice();return function(o){for(n=0;n<r;++n)i[n]=t[n]*(1-o)+e[n]*o;return i}};function be(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}function Me(t,e){var n,r=e?e.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(n=0;n<i;++n)o[n]=Ne(t[n],e[n]);for(;n<r;++n)a[n]=e[n];return function(t){for(n=0;n<i;++n)a[n]=o[n](t);return a}}var Ce=function(t,e){var n=new Date;return t=+t,e=+e,function(r){return n.setTime(t*(1-r)+e*r),n}},Ie=function(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}},Te=function(t,e){var n,r={},i={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=Ne(t[n],e[n]):i[n]=e[n];return function(t){for(n in r)i[n]=r[n](t);return i}},ke=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Ae=new RegExp(ke.source,"g");var Ee,$e,Se=function(t,e){var n,r,i,o=ke.lastIndex=Ae.lastIndex=0,a=-1,s=[],l=[];for(t+="",e+="";(n=ke.exec(t))&&(r=Ae.exec(e));)(i=r.index)>o&&(i=e.slice(o,i),s[a]?s[a]+=i:s[++a]=i),(n=n[0])===(r=r[0])?s[a]?s[a]+=r:s[++a]=r:(s[++a]=null,l.push({i:a,x:Ie(n,r)})),o=Ae.lastIndex;return o<e.length&&(i=e.slice(o),s[a]?s[a]+=i:s[++a]=i),s.length<2?l[0]?function(t){return function(e){return t(e)+""}}(l[0].x):function(t){return function(){return t}}(e):(e=l.length,function(t){for(var n,r=0;r<e;++r)s[(n=l[r]).i]=n.x(t);return s.join("")})},Ne=function(t,e){var n,r=typeof e;return null==e||"boolean"===r?ge(e):("number"===r?Ie:"string"===r?(n=ee(e))?(e=n,we):Se:e instanceof ee?we:e instanceof Date?Ce:be(e)?xe:Array.isArray(e)?Me:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?Te:Ie)(t,e)},Re=0,De=0,Ue=0,Le=0,Pe=0,ze=0,Fe="object"==typeof performance&&performance.now?performance:Date,He="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Oe(){return Pe||(He(qe),Pe=Fe.now()+ze)}function qe(){Pe=0}function We(){this._call=this._time=this._next=null}function Be(t,e,n){var r=new We;return r.restart(t,e,n),r}function Ye(){Pe=(Le=Fe.now())+ze,Re=De=0;try{!function(){Oe(),++Re;for(var t,e=Ee;e;)(t=Pe-e._time)>=0&&e._call.call(null,t),e=e._next;--Re}()}finally{Re=0,function(){var t,e,n=Ee,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Ee=e);$e=t,Xe(r)}(),Pe=0}}function je(){var t=Fe.now(),e=t-Le;e>1e3&&(ze-=e,Le=t)}function Xe(t){Re||(De&&(De=clearTimeout(De)),t-Pe>24?(t<1/0&&(De=setTimeout(Ye,t-Fe.now()-ze)),Ue&&(Ue=clearInterval(Ue))):(Ue||(Le=Fe.now(),Ue=setInterval(je,1e3)),Re=1,He(Ye)))}We.prototype=Be.prototype={constructor:We,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?Oe():+n)+(null==e?0:+e),this._next||$e===this||($e?$e._next=this:Ee=this,$e=this),this._call=t,this._time=n,Xe()},stop:function(){this._call&&(this._call=null,this._time=1/0,Xe())}};var Ve=function(t,e,n){var r=new We;return e=null==e?0:+e,r.restart((function(n){r.stop(),t(n+e)}),e,n),r},Ge=k("start","end","cancel","interrupt"),Ze=[],Qe=function(t,e,n,r,i,o){var a=t.__transition;if(a){if(n in a)return}else t.__transition={};!function(t,e,n){var r,i=t.__transition;function o(l){var u,c,f,h;if(1!==n.state)return s();for(u in i)if((h=i[u]).name===n.name){if(3===h.state)return Ve(o);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[u]):+u<e&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[u])}if(Ve((function(){3===n.state&&(n.state=4,n.timer.restart(a,n.delay,n.time),a(l))})),n.state=2,n.on.call("start",t,t.__data__,n.index,n.group),2===n.state){for(n.state=3,r=new Array(f=n.tween.length),u=0,c=-1;u<f;++u)(h=n.tween[u].value.call(t,t.__data__,n.index,n.group))&&(r[++c]=h);r.length=c+1}}function a(e){for(var i=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(s),n.state=5,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);5===n.state&&(n.on.call("end",t,t.__data__,n.index,n.group),s())}function s(){for(var r in n.state=6,n.timer.stop(),delete i[e],i)return;delete t.__transition}i[e]=n,n.timer=Be((function(t){n.state=1,n.timer.restart(o,n.delay,n.time),n.delay<=t&&o(t-n.delay)}),0,n.time)}(t,n,{name:e,index:r,group:i,on:Ge,tween:Ze,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})};function Je(t,e){var n=tn(t,e);if(n.state>0)throw new Error("too late; already scheduled");return n}function Ke(t,e){var n=tn(t,e);if(n.state>3)throw new Error("too late; already running");return n}function tn(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}var en,nn,rn,on,an=function(t,e){var n,r,i,o=t.__transition,a=!0;if(o){for(i in e=null==e?null:e+"",o)(n=o[i]).name===e?(r=n.state>2&&n.state<5,n.state=6,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete o[i]):a=!1;a&&delete t.__transition}},sn=180/Math.PI,ln={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},un=function(t,e,n,r,i,o){var a,s,l;return(a=Math.sqrt(t*t+e*e))&&(t/=a,e/=a),(l=t*n+e*r)&&(n-=t*l,r-=e*l),(s=Math.sqrt(n*n+r*r))&&(n/=s,r/=s,l/=s),t*r<e*n&&(t=-t,e=-e,l=-l,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(e,t)*sn,skewX:Math.atan(l)*sn,scaleX:a,scaleY:s}};function cn(t,e,n,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var s=[],l=[];return o=t(o),a=t(a),function(t,r,i,o,a,s){if(t!==i||r!==o){var l=a.push("translate(",null,e,null,n);s.push({i:l-4,x:Ie(t,i)},{i:l-2,x:Ie(r,o)})}else(i||o)&&a.push("translate("+i+e+o+n)}(o.translateX,o.translateY,a.translateX,a.translateY,s,l),function(t,e,n,o){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),o.push({i:n.push(i(n)+"rotate(",null,r)-2,x:Ie(t,e)})):e&&n.push(i(n)+"rotate("+e+r)}(o.rotate,a.rotate,s,l),function(t,e,n,o){t!==e?o.push({i:n.push(i(n)+"skewX(",null,r)-2,x:Ie(t,e)}):e&&n.push(i(n)+"skewX("+e+r)}(o.skewX,a.skewX,s,l),function(t,e,n,r,o,a){if(t!==n||e!==r){var s=o.push(i(o)+"scale(",null,",",null,")");a.push({i:s-4,x:Ie(t,n)},{i:s-2,x:Ie(e,r)})}else 1===n&&1===r||o.push(i(o)+"scale("+n+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,s,l),o=a=null,function(t){for(var e,n=-1,r=l.length;++n<r;)s[(e=l[n]).i]=e.x(t);return s.join("")}}}var fn=cn((function(t){return"none"===t?ln:(en||(en=document.createElement("DIV"),nn=document.documentElement,rn=document.defaultView),en.style.transform=t,t=rn.getComputedStyle(nn.appendChild(en),null).getPropertyValue("transform"),nn.removeChild(en),t=t.slice(7,-1).split(","),un(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),hn=cn((function(t){return null==t?ln:(on||(on=document.createElementNS("http://www.w3.org/2000/svg","g")),on.setAttribute("transform",t),(t=on.transform.baseVal.consolidate())?(t=t.matrix,un(t.a,t.b,t.c,t.d,t.e,t.f)):ln)}),", ",")",")");function pn(t,e){var n,r;return function(){var i=Ke(this,t),o=i.tween;if(o!==n)for(var a=0,s=(r=n=o).length;a<s;++a)if(r[a].name===e){(r=r.slice()).splice(a,1);break}i.tween=r}}function dn(t,e,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var o=Ke(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var s={name:e,value:n},l=0,u=i.length;l<u;++l)if(i[l].name===e){i[l]=s;break}l===u&&i.push(s)}o.tween=i}}function gn(t,e,n){var r=t._id;return t.each((function(){var t=Ke(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return tn(t,r).value[e]}}var yn=function(t,e){var n;return("number"==typeof e?Ie:e instanceof ee?we:(n=ee(e))?(e=n,we):Se)(t,e)};function vn(t){return function(){this.removeAttribute(t)}}function mn(t){return function(){this.removeAttributeNS(t.space,t.local)}}function wn(t,e,n){var r,i,o=n+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=e(r=a,n)}}function _n(t,e,n){var r,i,o=n+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=e(r=a,n)}}function xn(t,e,n){var r,i,o;return function(){var a,s,l=n(this);if(null!=l)return(a=this.getAttribute(t))===(s=l+"")?null:a===r&&s===i?o:(i=s,o=e(r=a,l));this.removeAttribute(t)}}function bn(t,e,n){var r,i,o;return function(){var a,s,l=n(this);if(null!=l)return(a=this.getAttributeNS(t.space,t.local))===(s=l+"")?null:a===r&&s===i?o:(i=s,o=e(r=a,l));this.removeAttributeNS(t.space,t.local)}}function Mn(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}function Cn(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}function In(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&Cn(t,i)),n}return i._value=e,i}function Tn(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&Mn(t,i)),n}return i._value=e,i}function kn(t,e){return function(){Je(this,t).delay=+e.apply(this,arguments)}}function An(t,e){return e=+e,function(){Je(this,t).delay=e}}function En(t,e){return function(){Ke(this,t).duration=+e.apply(this,arguments)}}function $n(t,e){return e=+e,function(){Ke(this,t).duration=e}}function Sn(t,e){if("function"!=typeof e)throw new Error;return function(){Ke(this,t).ease=e}}function Nn(t,e,n){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?Je:Ke;return function(){var a=o(this,t),s=a.on;s!==r&&(i=(r=s).copy()).on(e,n),a.on=i}}var Rn=Pt.prototype.constructor;function Dn(t){return function(){this.style.removeProperty(t)}}function Un(t,e,n){return function(r){this.style.setProperty(t,e.call(this,r),n)}}function Ln(t,e,n){var r,i;function o(){var o=e.apply(this,arguments);return o!==i&&(r=(i=o)&&Un(t,o,n)),r}return o._value=e,o}function Pn(t){return function(e){this.textContent=t.call(this,e)}}function zn(t){var e,n;function r(){var r=t.apply(this,arguments);return r!==n&&(e=(n=r)&&Pn(r)),e}return r._value=t,r}var Fn=0;function Hn(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function On(){return++Fn}var qn=Pt.prototype;Hn.prototype=function(t){return Pt().transition(t)}.prototype={constructor:Hn,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=E(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var s,l,u=r[a],c=u.length,f=o[a]=new Array(c),h=0;h<c;++h)(s=u[h])&&(l=t.call(s,s.__data__,h,u))&&("__data__"in s&&(l.__data__=s.__data__),f[h]=l,Qe(f[h],e,n,h,f,tn(s,n)));return new Hn(o,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=S(t));for(var r=this._groups,i=r.length,o=[],a=[],s=0;s<i;++s)for(var l,u=r[s],c=u.length,f=0;f<c;++f)if(l=u[f]){for(var h,p=t.call(l,l.__data__,f,u),d=tn(l,n),g=0,y=p.length;g<y;++g)(h=p[g])&&Qe(h,e,n,g,p,d);o.push(p),a.push(l)}return new Hn(o,a,e,n)},filter:function(t){"function"!=typeof t&&(t=N(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],s=a.length,l=r[i]=[],u=0;u<s;++u)(o=a[u])&&t.call(o,o.__data__,u,a)&&l.push(o);return new Hn(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var l,u=e[s],c=n[s],f=u.length,h=a[s]=new Array(f),p=0;p<f;++p)(l=u[p]||c[p])&&(h[p]=l);for(;s<r;++s)a[s]=e[s];return new Hn(a,this._parents,this._name,this._id)},selection:function(){return new Rn(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=On(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],l=s.length,u=0;u<l;++u)if(a=s[u]){var c=tn(a,e);Qe(a,t,n,u,s,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new Hn(r,this._parents,t,n)},call:qn.call,nodes:qn.nodes,node:qn.node,size:qn.size,empty:qn.empty,each:qn.each,on:function(t,e){var n=this._id;return arguments.length<2?tn(this.node(),n).on.on(t):this.each(Nn(n,t,e))},attr:function(t,e){var n=H(t),r="transform"===n?hn:yn;return this.attrTween(t,"function"==typeof e?(n.local?bn:xn)(n,r,gn(this,"attr."+t,e)):null==e?(n.local?mn:vn)(n):(n.local?_n:wn)(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=H(t);return this.tween(n,(r.local?In:Tn)(r,e))},style:function(t,e,n){var r="transform"==(t+="")?fn:yn;return null==e?this.styleTween(t,function(t,e){var n,r,i;return function(){var o=Q(this,t),a=(this.style.removeProperty(t),Q(this,t));return o===a?null:o===n&&a===r?i:i=e(n=o,r=a)}}(t,r)).on("end.style."+t,Dn(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,i,o;return function(){var a=Q(this,t),s=n(this),l=s+"";return null==s&&(this.style.removeProperty(t),l=s=Q(this,t)),a===l?null:a===r&&l===i?o:(i=l,o=e(r=a,s))}}(t,r,gn(this,"style."+t,e))).each(function(t,e){var n,r,i,o,a="style."+e,s="end."+a;return function(){var l=Ke(this,t),u=l.on,c=null==l.value[a]?o||(o=Dn(e)):void 0;u===n&&i===c||(r=(n=u).copy()).on(s,i=c),l.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,i,o=n+"";return function(){var a=Q(this,t);return a===o?null:a===r?i:i=e(r=a,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,Ln(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(gn(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,zn(t))},remove:function(){return this.on("end.remove",(t=this._id,function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}));var t},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,i=tn(this.node(),n).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==e?pn:dn)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?kn:An)(e,t)):tn(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?En:$n)(e,t)):tn(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(Sn(e,t)):tn(this.node(),e).ease},end:function(){var t,e,n=this,r=n._id,i=n.size();return new Promise((function(o,a){var s={value:a},l={value:function(){0==--i&&o()}};n.each((function(){var n=Ke(this,r),i=n.on;i!==t&&((e=(t=i).copy())._.cancel.push(s),e._.interrupt.push(s),e._.end.push(l)),n.on=e}))}))}};var Wn={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Bn(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return Wn.time=Oe(),Wn;return n}Pt.prototype.interrupt=function(t){return this.each((function(){an(this,t)}))},Pt.prototype.transition=function(t){var e,n;t instanceof Hn?(e=t._id,t=t._name):(e=On(),(n=Wn).time=Oe(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],l=s.length,u=0;u<l;++u)(a=s[u])&&Qe(a,t,e,u,s,n||Bn(a,e));return new Hn(r,this._parents,t,e)};function Yn(t){return[+t[0],+t[1]]}function jn(t){return[Yn(t[0]),Yn(t[1])]}["w","e"].map(Xn),["n","s"].map(Xn),["n","w","e","s","nw","ne","sw","se"].map(Xn);function Xn(t){return{type:t}}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;var Vn=Math.PI,Gn=2*Vn,Zn=Gn-1e-6;function Qn(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Jn(){return new Qn}Qn.prototype=Jn.prototype={constructor:Qn,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,i,o){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,e,n,r,i){t=+t,e=+e,n=+n,r=+r,i=+i;var o=this._x1,a=this._y1,s=n-t,l=r-e,u=o-t,c=a-e,f=u*u+c*c;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(f>1e-6)if(Math.abs(c*s-l*u)>1e-6&&i){var h=n-o,p=r-a,d=s*s+l*l,g=h*h+p*p,y=Math.sqrt(d),v=Math.sqrt(f),m=i*Math.tan((Vn-Math.acos((d+f-g)/(2*y*v)))/2),w=m/v,_=m/y;Math.abs(w-1)>1e-6&&(this._+="L"+(t+w*u)+","+(e+w*c)),this._+="A"+i+","+i+",0,0,"+ +(c*h>u*p)+","+(this._x1=t+_*s)+","+(this._y1=e+_*l)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,i,o){t=+t,e=+e,o=!!o;var a=(n=+n)*Math.cos(r),s=n*Math.sin(r),l=t+a,u=e+s,c=1^o,f=o?r-i:i-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+l+","+u:(Math.abs(this._x1-l)>1e-6||Math.abs(this._y1-u)>1e-6)&&(this._+="L"+l+","+u),n&&(f<0&&(f=f%Gn+Gn),f>Zn?this._+="A"+n+","+n+",0,1,"+c+","+(t-a)+","+(e-s)+"A"+n+","+n+",0,1,"+c+","+(this._x1=l)+","+(this._y1=u):f>1e-6&&(this._+="A"+n+","+n+",0,"+ +(f>=Vn)+","+c+","+(this._x1=t+n*Math.cos(i))+","+(this._y1=e+n*Math.sin(i))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var Kn=Jn;function tr(){}function er(t,e){var n=new tr;if(t instanceof tr)t.each((function(t,e){n.set(e,t)}));else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==e)for(;++i<o;)n.set(i,t[i]);else for(;++i<o;)n.set(e(r=t[i],i,t),r)}else if(t)for(var a in t)n.set(a,t[a]);return n}tr.prototype=er.prototype={constructor:tr,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var nr=er;function rr(){}var ir=nr.prototype;function or(t,e){var n=new rr;if(t instanceof rr)t.each((function(t){n.add(t)}));else if(t){var r=-1,i=t.length;if(null==e)for(;++r<i;)n.add(t[r]);else for(;++r<i;)n.add(e(t[r],r,t))}return n}rr.prototype=or.prototype={constructor:rr,has:ir.has,add:function(t){return this["$"+(t+="")]=t,this},remove:ir.remove,clear:ir.clear,values:ir.keys,size:ir.size,empty:ir.empty,each:ir.each};Array.prototype.slice;var ar={},sr={};function lr(t){return new Function("d","return {"+t.map((function(t,e){return JSON.stringify(t)+": d["+e+'] || ""'})).join(",")+"}")}function ur(t){var e=Object.create(null),n=[];return t.forEach((function(t){for(var r in t)r in e||n.push(e[r]=r)})),n}function cr(t,e){var n=t+"",r=n.length;return r<e?new Array(e-r+1).join(0)+n:n}function fr(t){var e,n=t.getUTCHours(),r=t.getUTCMinutes(),i=t.getUTCSeconds(),o=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((e=t.getUTCFullYear())<0?"-"+cr(-e,6):e>9999?"+"+cr(e,6):cr(e,4))+"-"+cr(t.getUTCMonth()+1,2)+"-"+cr(t.getUTCDate(),2)+(o?"T"+cr(n,2)+":"+cr(r,2)+":"+cr(i,2)+"."+cr(o,3)+"Z":i?"T"+cr(n,2)+":"+cr(r,2)+":"+cr(i,2)+"Z":r||n?"T"+cr(n,2)+":"+cr(r,2)+"Z":"")}var hr=function(t){var e=new RegExp('["'+t+"\n\r]"),n=t.charCodeAt(0);function r(t,e){var r,i=[],o=t.length,a=0,s=0,l=o<=0,u=!1;function c(){if(l)return sr;if(u)return u=!1,ar;var e,r,i=a;if(34===t.charCodeAt(i)){for(;a++<o&&34!==t.charCodeAt(a)||34===t.charCodeAt(++a););return(e=a)>=o?l=!0:10===(r=t.charCodeAt(a++))?u=!0:13===r&&(u=!0,10===t.charCodeAt(a)&&++a),t.slice(i+1,e-1).replace(/""/g,'"')}for(;a<o;){if(10===(r=t.charCodeAt(e=a++)))u=!0;else if(13===r)u=!0,10===t.charCodeAt(a)&&++a;else if(r!==n)continue;return t.slice(i,e)}return l=!0,t.slice(i,o)}for(10===t.charCodeAt(o-1)&&--o,13===t.charCodeAt(o-1)&&--o;(r=c())!==sr;){for(var f=[];r!==ar&&r!==sr;)f.push(r),r=c();e&&null==(f=e(f,s++))||i.push(f)}return i}function i(e,n){return e.map((function(e){return n.map((function(t){return a(e[t])})).join(t)}))}function o(e){return e.map(a).join(t)}function a(t){return null==t?"":t instanceof Date?fr(t):e.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,i,o=r(t,(function(t,r){if(n)return n(t,r-1);i=t,n=e?function(t,e){var n=lr(t);return function(r,i){return e(n(r),i,t)}}(t,e):lr(t)}));return o.columns=i||[],o},parseRows:r,format:function(e,n){return null==n&&(n=ur(e)),[n.map(a).join(t)].concat(i(e,n)).join("\n")},formatBody:function(t,e){return null==e&&(e=ur(t)),i(t,e).join("\n")},formatRows:function(t){return t.map(o).join("\n")},formatRow:o,formatValue:a}},pr=hr(","),dr=pr.parse,gr=(pr.parseRows,pr.format,pr.formatBody,pr.formatRows,pr.formatRow,pr.formatValue,hr("\t")),yr=gr.parse;gr.parseRows,gr.format,gr.formatBody,gr.formatRows,gr.formatRow,gr.formatValue;function vr(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var mr=function(t,e){return fetch(t,e).then(vr)};function wr(t){return function(e,n,r){return 2===arguments.length&&"function"==typeof n&&(r=n,n=void 0),mr(e,n).then((function(e){return t(e,r)}))}}var _r=wr(dr);wr(yr);function xr(t){return function(e,n){return mr(e,n).then((function(e){return(new DOMParser).parseFromString(e,t)}))}}xr("application/xml"),xr("text/html"),xr("image/svg+xml");function br(t,e,n,r){if(isNaN(e)||isNaN(n))return t;var i,o,a,s,l,u,c,f,h,p=t._root,d={data:r},g=t._x0,y=t._y0,v=t._x1,m=t._y1;if(!p)return t._root=d,t;for(;p.length;)if((u=e>=(o=(g+v)/2))?g=o:v=o,(c=n>=(a=(y+m)/2))?y=a:m=a,i=p,!(p=p[f=c<<1|u]))return i[f]=d,t;if(s=+t._x.call(null,p.data),l=+t._y.call(null,p.data),e===s&&n===l)return d.next=p,i?i[f]=d:t._root=d,t;do{i=i?i[f]=new Array(4):t._root=new Array(4),(u=e>=(o=(g+v)/2))?g=o:v=o,(c=n>=(a=(y+m)/2))?y=a:m=a}while((f=c<<1|u)==(h=(l>=a)<<1|s>=o));return i[h]=p,i[f]=d,t}var Mr=function(t,e,n,r,i){this.node=t,this.x0=e,this.y0=n,this.x1=r,this.y1=i};function Cr(t){return t[0]}function Ir(t){return t[1]}function Tr(t,e,n){var r=new kr(null==e?Cr:e,null==n?Ir:n,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function kr(t,e,n,r,i,o){this._x=t,this._y=e,this._x0=n,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function Ar(t){for(var e={data:t.data},n=e;t=t.next;)n=n.next={data:t.data};return e}var Er=Tr.prototype=kr.prototype;Er.copy=function(){var t,e,n=new kr(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return n;if(!r.length)return n._root=Ar(r),n;for(t=[{source:r,target:n._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(e=r.source[i])&&(e.length?t.push({source:e,target:r.target[i]=new Array(4)}):r.target[i]=Ar(e));return n},Er.add=function(t){var e=+this._x.call(null,t),n=+this._y.call(null,t);return br(this.cover(e,n),e,n,t)},Er.addAll=function(t){var e,n,r,i,o=t.length,a=new Array(o),s=new Array(o),l=1/0,u=1/0,c=-1/0,f=-1/0;for(n=0;n<o;++n)isNaN(r=+this._x.call(null,e=t[n]))||isNaN(i=+this._y.call(null,e))||(a[n]=r,s[n]=i,r<l&&(l=r),r>c&&(c=r),i<u&&(u=i),i>f&&(f=i));if(l>c||u>f)return this;for(this.cover(l,u).cover(c,f),n=0;n<o;++n)br(this,a[n],s[n],t[n]);return this},Er.cover=function(t,e){if(isNaN(t=+t)||isNaN(e=+e))return this;var n=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(n))i=(n=Math.floor(t))+1,o=(r=Math.floor(e))+1;else{for(var a,s,l=i-n,u=this._root;n>t||t>=i||r>e||e>=o;)switch(s=(e<r)<<1|t<n,(a=new Array(4))[s]=u,u=a,l*=2,s){case 0:i=n+l,o=r+l;break;case 1:n=i-l,o=r+l;break;case 2:i=n+l,r=o-l;break;case 3:n=i-l,r=o-l}this._root&&this._root.length&&(this._root=u)}return this._x0=n,this._y0=r,this._x1=i,this._y1=o,this},Er.data=function(){var t=[];return this.visit((function(e){if(!e.length)do{t.push(e.data)}while(e=e.next)})),t},Er.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Er.find=function(t,e,n){var r,i,o,a,s,l,u,c=this._x0,f=this._y0,h=this._x1,p=this._y1,d=[],g=this._root;for(g&&d.push(new Mr(g,c,f,h,p)),null==n?n=1/0:(c=t-n,f=e-n,h=t+n,p=e+n,n*=n);l=d.pop();)if(!(!(g=l.node)||(i=l.x0)>h||(o=l.y0)>p||(a=l.x1)<c||(s=l.y1)<f))if(g.length){var y=(i+a)/2,v=(o+s)/2;d.push(new Mr(g[3],y,v,a,s),new Mr(g[2],i,v,y,s),new Mr(g[1],y,o,a,v),new Mr(g[0],i,o,y,v)),(u=(e>=v)<<1|t>=y)&&(l=d[d.length-1],d[d.length-1]=d[d.length-1-u],d[d.length-1-u]=l)}else{var m=t-+this._x.call(null,g.data),w=e-+this._y.call(null,g.data),_=m*m+w*w;if(_<n){var x=Math.sqrt(n=_);c=t-x,f=e-x,h=t+x,p=e+x,r=g.data}}return r},Er.remove=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(a=+this._y.call(null,t)))return this;var e,n,r,i,o,a,s,l,u,c,f,h,p=this._root,d=this._x0,g=this._y0,y=this._x1,v=this._y1;if(!p)return this;if(p.length)for(;;){if((u=o>=(s=(d+y)/2))?d=s:y=s,(c=a>=(l=(g+v)/2))?g=l:v=l,e=p,!(p=p[f=c<<1|u]))return this;if(!p.length)break;(e[f+1&3]||e[f+2&3]||e[f+3&3])&&(n=e,h=f)}for(;p.data!==t;)if(r=p,!(p=p.next))return this;return(i=p.next)&&delete p.next,r?(i?r.next=i:delete r.next,this):e?(i?e[f]=i:delete e[f],(p=e[0]||e[1]||e[2]||e[3])&&p===(e[3]||e[2]||e[1]||e[0])&&!p.length&&(n?n[h]=p:this._root=p),this):(this._root=i,this)},Er.removeAll=function(t){for(var e=0,n=t.length;e<n;++e)this.remove(t[e]);return this},Er.root=function(){return this._root},Er.size=function(){var t=0;return this.visit((function(e){if(!e.length)do{++t}while(e=e.next)})),t},Er.visit=function(t){var e,n,r,i,o,a,s=[],l=this._root;for(l&&s.push(new Mr(l,this._x0,this._y0,this._x1,this._y1));e=s.pop();)if(!t(l=e.node,r=e.x0,i=e.y0,o=e.x1,a=e.y1)&&l.length){var u=(r+o)/2,c=(i+a)/2;(n=l[3])&&s.push(new Mr(n,u,c,o,a)),(n=l[2])&&s.push(new Mr(n,r,c,u,a)),(n=l[1])&&s.push(new Mr(n,u,i,o,c)),(n=l[0])&&s.push(new Mr(n,r,i,u,c))}return this},Er.visitAfter=function(t){var e,n=[],r=[];for(this._root&&n.push(new Mr(this._root,this._x0,this._y0,this._x1,this._y1));e=n.pop();){var i=e.node;if(i.length){var o,a=e.x0,s=e.y0,l=e.x1,u=e.y1,c=(a+l)/2,f=(s+u)/2;(o=i[0])&&n.push(new Mr(o,a,s,c,f)),(o=i[1])&&n.push(new Mr(o,c,s,l,f)),(o=i[2])&&n.push(new Mr(o,a,f,c,u)),(o=i[3])&&n.push(new Mr(o,c,f,l,u))}r.push(e)}for(;e=r.pop();)t(e.node,e.x0,e.y0,e.x1,e.y1);return this},Er.x=function(t){return arguments.length?(this._x=t,this):this._x},Er.y=function(t){return arguments.length?(this._y=t,this):this._y};Math.PI,Math.sqrt(5);var $r=function(){return Math.random()},Sr=(function t(e){function n(t,n){return t=null==t?0:+t,n=null==n?1:+n,1===arguments.length?(n=t,t=0):n-=t,function(){return e()*n+t}}return n.source=t,n}($r),function t(e){function n(t,n){var r,i;return t=null==t?0:+t,n=null==n?1:+n,function(){var o;if(null!=r)o=r,r=null;else do{r=2*e()-1,o=2*e()-1,i=r*r+o*o}while(!i||i>1);return t+n*o*Math.sqrt(-2*Math.log(i)/i)}}return n.source=t,n}($r)),Nr=(function t(e){function n(){var t=Sr.source(e).apply(this,arguments);return function(){return Math.exp(t())}}return n.source=t,n}($r),function t(e){function n(t){return function(){for(var n=0,r=0;r<t;++r)n+=e();return n}}return n.source=t,n}($r));(function t(e){function n(t){var n=Nr.source(e)(t);return function(){return n()/t}}return n.source=t,n})($r),function t(e){function n(t){return function(){return-Math.log(1-e())/t}}return n.source=t,n}($r);function Rr(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}var Dr=Array.prototype,Ur=Dr.map,Lr=Dr.slice,Pr={name:"implicit"};function zr(){var t=nr(),e=[],n=[],r=Pr;function i(i){var o=i+"",a=t.get(o);if(!a){if(r!==Pr)return r;t.set(o,a=e.push(i))}return n[(a-1)%n.length]}return i.domain=function(n){if(!arguments.length)return e.slice();e=[],t=nr();for(var r,o,a=-1,s=n.length;++a<s;)t.has(o=(r=n[a])+"")||t.set(o,e.push(r));return i},i.range=function(t){return arguments.length?(n=Lr.call(t),i):n.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return zr(e,n).unknown(r)},Rr.apply(i,arguments),i}var Fr=function(t,e){return t=+t,e=+e,function(n){return Math.round(t*(1-n)+e*n)}},Hr=function(t){return+t},Or=[0,1];function qr(t){return t}function Wr(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:(n=isNaN(e)?NaN:.5,function(){return n});var n}function Br(t){var e,n=t[0],r=t[t.length-1];return n>r&&(e=n,n=r,r=e),function(t){return Math.max(n,Math.min(r,t))}}function Yr(t,e,n){var r=t[0],i=t[1],o=e[0],a=e[1];return i<r?(r=Wr(i,r),o=n(a,o)):(r=Wr(r,i),o=n(o,a)),function(t){return o(r(t))}}function jr(t,e,n){var r=Math.min(t.length,e.length)-1,i=new Array(r),o=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++a<r;)i[a]=Wr(t[a],t[a+1]),o[a]=n(e[a],e[a+1]);return function(e){var n=s(t,e,1,r)-1;return o[n](i[n](e))}}function Xr(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Vr(){var t,e,n,r,i,o,a=Or,s=Or,l=Ne,u=qr;function c(){return r=Math.min(a.length,s.length)>2?jr:Yr,i=o=null,f}function f(e){return isNaN(e=+e)?n:(i||(i=r(a.map(t),s,l)))(t(u(e)))}return f.invert=function(n){return u(e((o||(o=r(s,a.map(t),Ie)))(n)))},f.domain=function(t){return arguments.length?(a=Ur.call(t,Hr),u===qr||(u=Br(a)),c()):a.slice()},f.range=function(t){return arguments.length?(s=Lr.call(t),c()):s.slice()},f.rangeRound=function(t){return s=Lr.call(t),l=Fr,c()},f.clamp=function(t){return arguments.length?(u=t?Br(a):qr,f):u!==qr},f.interpolate=function(t){return arguments.length?(l=t,c()):l},f.unknown=function(t){return arguments.length?(n=t,f):n},function(n,r){return t=n,e=r,c()}}function Gr(t,e){return Vr()(t,e)}var Zr=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Qr(t){if(!(e=Zr.exec(t)))throw new Error("invalid format: "+t);var e;return new Jr({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function Jr(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}Qr.prototype=Jr.prototype,Jr.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Kr,ti,ei,ni,ri=function(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]},ii=function(t){return(t=ri(Math.abs(t)))?t[1]:NaN},oi=function(t,e){var n=ri(t,e);if(!n)return t+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},ai={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return oi(100*t,e)},r:oi,s:function(t,e){var n=ri(t,e);if(!n)return t+"";var r=n[0],i=n[1],o=i-(Kr=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+ri(t,Math.max(0,e+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},si=function(t){return t},li=Array.prototype.map,ui=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];ti=function(t){var e,n,r=void 0===t.grouping||void 0===t.thousands?si:(e=li.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var i=t.length,o=[],a=0,s=e[0],l=0;i>0&&s>0&&(l+s+1>r&&(s=Math.max(1,r-l)),o.push(t.substring(i-=s,i+s)),!((l+=s+1)>r));)s=e[a=(a+1)%e.length];return o.reverse().join(n)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",s=void 0===t.numerals?si:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(li.call(t.numerals,String)),l=void 0===t.percent?"%":t.percent+"",u=void 0===t.minus?"-":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function f(t){var e=(t=Qr(t)).fill,n=t.align,f=t.sign,h=t.symbol,p=t.zero,d=t.width,g=t.comma,y=t.precision,v=t.trim,m=t.type;"n"===m?(g=!0,m="g"):ai[m]||(void 0===y&&(y=12),v=!0,m="g"),(p||"0"===e&&"="===n)&&(p=!0,e="0",n="=");var w="$"===h?i:"#"===h&&/[boxX]/.test(m)?"0"+m.toLowerCase():"",_="$"===h?o:/[%p]/.test(m)?l:"",x=ai[m],b=/[defgprs%]/.test(m);function M(t){var i,o,l,h=w,M=_;if("c"===m)M=x(t)+M,t="";else{var C=(t=+t)<0;if(t=isNaN(t)?c:x(Math.abs(t),y),v&&(t=function(t){t:for(var e,n=t.length,r=1,i=-1;r<n;++r)switch(t[r]){case".":i=e=r;break;case"0":0===i&&(i=r),e=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(e+1):t}(t)),C&&0==+t&&(C=!1),h=(C?"("===f?f:u:"-"===f||"("===f?"":f)+h,M=("s"===m?ui[8+Kr/3]:"")+M+(C&&"("===f?")":""),b)for(i=-1,o=t.length;++i<o;)if(48>(l=t.charCodeAt(i))||l>57){M=(46===l?a+t.slice(i+1):t.slice(i))+M,t=t.slice(0,i);break}}g&&!p&&(t=r(t,1/0));var I=h.length+t.length+M.length,T=I<d?new Array(d-I+1).join(e):"";switch(g&&p&&(t=r(T+t,T.length?d-M.length:1/0),T=""),n){case"<":t=h+t+M+T;break;case"=":t=h+T+t+M;break;case"^":t=T.slice(0,I=T.length>>1)+h+t+M+T.slice(I);break;default:t=T+h+t+M}return s(t)}return y=void 0===y?6:/[gprs]/.test(m)?Math.max(1,Math.min(21,y)):Math.max(0,Math.min(20,y)),M.toString=function(){return t+""},M}return{format:f,formatPrefix:function(t,e){var n=f(((t=Qr(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(ii(e)/3))),i=Math.pow(10,-r),o=ui[8+r/3];return function(t){return n(i*t)+o}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),ei=ti.format,ni=ti.formatPrefix;var ci=function(t,e,n,r){var i,o=v(t,e,n);switch((r=Qr(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(i=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(ii(e)/3)))-ii(Math.abs(t)))}(o,a))||(r.precision=i),ni(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,ii(e)-ii(t))+1}(o,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-ii(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return ei(r)};function fi(t){var e=t.domain;return t.ticks=function(t){var n=e();return g(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return ci(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,i=e(),o=0,a=i.length-1,s=i[o],l=i[a];return l<s&&(r=s,s=l,l=r,r=o,o=a,a=r),(r=y(s,l,n))>0?r=y(s=Math.floor(s/r)*r,l=Math.ceil(l/r)*r,n):r<0&&(r=y(s=Math.ceil(s*r)/r,l=Math.floor(l*r)/r,n)),r>0?(i[o]=Math.floor(s/r)*r,i[a]=Math.ceil(l/r)*r,e(i)):r<0&&(i[o]=Math.ceil(s*r)/r,i[a]=Math.floor(l*r)/r,e(i)),t},t}function hi(){var t=Gr(qr,qr);return t.copy=function(){return Xr(t,hi())},Rr.apply(t,arguments),fi(t)}function pi(t){return function(e){return e<0?-Math.pow(-e,t):Math.pow(e,t)}}function di(t){return t<0?-Math.sqrt(-t):Math.sqrt(t)}function gi(t){return t<0?-t*t:t*t}function yi(t){var e=t(qr,qr),n=1;function r(){return 1===n?t(qr,qr):.5===n?t(di,gi):t(pi(n),pi(1/n))}return e.exponent=function(t){return arguments.length?(n=+t,r()):n},fi(e)}function vi(){var t=yi(Vr());return t.copy=function(){return Xr(t,vi()).exponent(t.exponent())},Rr.apply(t,arguments),t}function mi(){return vi.apply(null,arguments).exponent(.5)}var wi=new Date,_i=new Date;function xi(t,e,n,r){function i(e){return t(e=0===arguments.length?new Date:new Date(+e)),e}return i.floor=function(e){return t(e=new Date(+e)),e},i.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},i.round=function(t){var e=i(t),n=i.ceil(t);return t-e<n-t?e:n},i.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},i.range=function(n,r,o){var a,s=[];if(n=i.ceil(n),o=null==o?1:Math.floor(o),!(n<r&&o>0))return s;do{s.push(a=new Date(+n)),e(n,o),t(n)}while(a<n&&n<r);return s},i.filter=function(n){return xi((function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););}))},n&&(i.count=function(e,r){return wi.setTime(+e),_i.setTime(+r),t(wi),t(_i),Math.floor(n(wi,_i))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(e){return r(e)%t==0}:function(e){return i.count(0,e)%t==0}):i:null}),i}var bi=xi((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,e){t.setFullYear(t.getFullYear()+e)}),(function(t,e){return e.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));bi.every=function(t){return isFinite(t=Math.floor(t))&&t>0?xi((function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,n){e.setFullYear(e.getFullYear()+n*t)})):null};var Mi=bi,Ci=(bi.range,xi((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,e){t.setMonth(t.getMonth()+e)}),(function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()})));Ci.range;function Ii(t){return xi((function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+7*e)}),(function(t,e){return(e-t-6e4*(e.getTimezoneOffset()-t.getTimezoneOffset()))/6048e5}))}var Ti=Ii(0),ki=Ii(1),Ai=Ii(2),Ei=Ii(3),$i=Ii(4),Si=Ii(5),Ni=Ii(6),Ri=(Ti.range,ki.range,Ai.range,Ei.range,$i.range,Si.range,Ni.range,xi((function(t){t.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+e)}),(function(t,e){return(e-t-6e4*(e.getTimezoneOffset()-t.getTimezoneOffset()))/864e5}),(function(t){return t.getDate()-1}))),Di=Ri,Ui=(Ri.range,xi((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-6e4*t.getMinutes())}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getHours()}))),Li=(Ui.range,xi((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,e){t.setTime(+t+6e4*e)}),(function(t,e){return(e-t)/6e4}),(function(t){return t.getMinutes()}))),Pi=(Li.range,xi((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,e){t.setTime(+t+1e3*e)}),(function(t,e){return(e-t)/1e3}),(function(t){return t.getUTCSeconds()}))),zi=(Pi.range,xi((function(){}),(function(t,e){t.setTime(+t+e)}),(function(t,e){return e-t})));zi.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?xi((function(e){e.setTime(Math.floor(e/t)*t)}),(function(e,n){e.setTime(+e+n*t)}),(function(e,n){return(n-e)/t})):zi:null};zi.range;function Fi(t){return xi((function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+7*e)}),(function(t,e){return(e-t)/6048e5}))}var Hi=Fi(0),Oi=Fi(1),qi=Fi(2),Wi=Fi(3),Bi=Fi(4),Yi=Fi(5),ji=Fi(6),Xi=(Hi.range,Oi.range,qi.range,Wi.range,Bi.range,Yi.range,ji.range,xi((function(t){t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+e)}),(function(t,e){return(e-t)/864e5}),(function(t){return t.getUTCDate()-1}))),Vi=Xi,Gi=(Xi.range,xi((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)}),(function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()})));Gi.every=function(t){return isFinite(t=Math.floor(t))&&t>0?xi((function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)})):null};var Zi=Gi;Gi.range;function Qi(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Ji(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Ki(t,e,n){return{y:t,m:e,d:n,H:0,M:0,S:0,L:0}}var to,eo={"-":"",_:" ",0:"0"},no=/^\s*\d+/,ro=/^%/,io=/[\\^$*+?|[\]().{}]/g;function oo(t,e,n){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<n?new Array(n-o+1).join(e)+i:i)}function ao(t){return t.replace(io,"\\$&")}function so(t){return new RegExp("^(?:"+t.map(ao).join("|")+")","i")}function lo(t){for(var e={},n=-1,r=t.length;++n<r;)e[t[n].toLowerCase()]=n;return e}function uo(t,e,n){var r=no.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function co(t,e,n){var r=no.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function fo(t,e,n){var r=no.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function ho(t,e,n){var r=no.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function po(t,e,n){var r=no.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function go(t,e,n){var r=no.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function yo(t,e,n){var r=no.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function vo(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function mo(t,e,n){var r=no.exec(e.slice(n,n+1));return r?(t.q=3*r[0]-3,n+r[0].length):-1}function wo(t,e,n){var r=no.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function _o(t,e,n){var r=no.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function xo(t,e,n){var r=no.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function bo(t,e,n){var r=no.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function Mo(t,e,n){var r=no.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function Co(t,e,n){var r=no.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function Io(t,e,n){var r=no.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function To(t,e,n){var r=no.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function ko(t,e,n){var r=ro.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function Ao(t,e,n){var r=no.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function Eo(t,e,n){var r=no.exec(e.slice(n));return r?(t.s=+r[0],n+r[0].length):-1}function $o(t,e){return oo(t.getDate(),e,2)}function So(t,e){return oo(t.getHours(),e,2)}function No(t,e){return oo(t.getHours()%12||12,e,2)}function Ro(t,e){return oo(1+Di.count(Mi(t),t),e,3)}function Do(t,e){return oo(t.getMilliseconds(),e,3)}function Uo(t,e){return Do(t,e)+"000"}function Lo(t,e){return oo(t.getMonth()+1,e,2)}function Po(t,e){return oo(t.getMinutes(),e,2)}function zo(t,e){return oo(t.getSeconds(),e,2)}function Fo(t){var e=t.getDay();return 0===e?7:e}function Ho(t,e){return oo(Ti.count(Mi(t)-1,t),e,2)}function Oo(t,e){var n=t.getDay();return t=n>=4||0===n?$i(t):$i.ceil(t),oo($i.count(Mi(t),t)+(4===Mi(t).getDay()),e,2)}function qo(t){return t.getDay()}function Wo(t,e){return oo(ki.count(Mi(t)-1,t),e,2)}function Bo(t,e){return oo(t.getFullYear()%100,e,2)}function Yo(t,e){return oo(t.getFullYear()%1e4,e,4)}function jo(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+oo(e/60|0,"0",2)+oo(e%60,"0",2)}function Xo(t,e){return oo(t.getUTCDate(),e,2)}function Vo(t,e){return oo(t.getUTCHours(),e,2)}function Go(t,e){return oo(t.getUTCHours()%12||12,e,2)}function Zo(t,e){return oo(1+Vi.count(Zi(t),t),e,3)}function Qo(t,e){return oo(t.getUTCMilliseconds(),e,3)}function Jo(t,e){return Qo(t,e)+"000"}function Ko(t,e){return oo(t.getUTCMonth()+1,e,2)}function ta(t,e){return oo(t.getUTCMinutes(),e,2)}function ea(t,e){return oo(t.getUTCSeconds(),e,2)}function na(t){var e=t.getUTCDay();return 0===e?7:e}function ra(t,e){return oo(Hi.count(Zi(t)-1,t),e,2)}function ia(t,e){var n=t.getUTCDay();return t=n>=4||0===n?Bi(t):Bi.ceil(t),oo(Bi.count(Zi(t),t)+(4===Zi(t).getUTCDay()),e,2)}function oa(t){return t.getUTCDay()}function aa(t,e){return oo(Oi.count(Zi(t)-1,t),e,2)}function sa(t,e){return oo(t.getUTCFullYear()%100,e,2)}function la(t,e){return oo(t.getUTCFullYear()%1e4,e,4)}function ua(){return"+0000"}function ca(){return"%"}function fa(t){return+t}function ha(t){return Math.floor(+t/1e3)}!function(t){to=function(t){var e=t.dateTime,n=t.date,r=t.time,i=t.periods,o=t.days,a=t.shortDays,s=t.months,l=t.shortMonths,u=so(i),c=lo(i),f=so(o),h=lo(o),p=so(a),d=lo(a),g=so(s),y=lo(s),v=so(l),m=lo(l),w={a:function(t){return a[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return l[t.getMonth()]},B:function(t){return s[t.getMonth()]},c:null,d:$o,e:$o,f:Uo,H:So,I:No,j:Ro,L:Do,m:Lo,M:Po,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:fa,s:ha,S:zo,u:Fo,U:Ho,V:Oo,w:qo,W:Wo,x:null,X:null,y:Bo,Y:Yo,Z:jo,"%":ca},_={a:function(t){return a[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return l[t.getUTCMonth()]},B:function(t){return s[t.getUTCMonth()]},c:null,d:Xo,e:Xo,f:Jo,H:Vo,I:Go,j:Zo,L:Qo,m:Ko,M:ta,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:fa,s:ha,S:ea,u:na,U:ra,V:ia,w:oa,W:aa,x:null,X:null,y:sa,Y:la,Z:ua,"%":ca},x={a:function(t,e,n){var r=p.exec(e.slice(n));return r?(t.w=d[r[0].toLowerCase()],n+r[0].length):-1},A:function(t,e,n){var r=f.exec(e.slice(n));return r?(t.w=h[r[0].toLowerCase()],n+r[0].length):-1},b:function(t,e,n){var r=v.exec(e.slice(n));return r?(t.m=m[r[0].toLowerCase()],n+r[0].length):-1},B:function(t,e,n){var r=g.exec(e.slice(n));return r?(t.m=y[r[0].toLowerCase()],n+r[0].length):-1},c:function(t,n,r){return C(t,e,n,r)},d:_o,e:_o,f:To,H:bo,I:bo,j:xo,L:Io,m:wo,M:Mo,p:function(t,e,n){var r=u.exec(e.slice(n));return r?(t.p=c[r[0].toLowerCase()],n+r[0].length):-1},q:mo,Q:Ao,s:Eo,S:Co,u:co,U:fo,V:ho,w:uo,W:po,x:function(t,e,r){return C(t,n,e,r)},X:function(t,e,n){return C(t,r,e,n)},y:yo,Y:go,Z:vo,"%":ko};function b(t,e){return function(n){var r,i,o,a=[],s=-1,l=0,u=t.length;for(n instanceof Date||(n=new Date(+n));++s<u;)37===t.charCodeAt(s)&&(a.push(t.slice(l,s)),null!=(i=eo[r=t.charAt(++s)])?r=t.charAt(++s):i="e"===r?" ":"0",(o=e[r])&&(r=o(n,i)),a.push(r),l=s+1);return a.push(t.slice(l,s)),a.join("")}}function M(t,e){return function(n){var r,i,o=Ki(1900,void 0,1);if(C(o,t,n+="",0)!=n.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(e&&!("Z"in o)&&(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=Ji(Ki(o.y,0,1))).getUTCDay(),r=i>4||0===i?Oi.ceil(r):Oi(r),r=Vi.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=Qi(Ki(o.y,0,1))).getDay(),r=i>4||0===i?ki.ceil(r):ki(r),r=Di.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?Ji(Ki(o.y,0,1)).getUTCDay():Qi(Ki(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,Ji(o)):Qi(o)}}function C(t,e,n,r){for(var i,o,a=0,s=e.length,l=n.length;a<s;){if(r>=l)return-1;if(37===(i=e.charCodeAt(a++))){if(i=e.charAt(a++),!(o=x[i in eo?e.charAt(a++):i])||(r=o(t,n,r))<0)return-1}else if(i!=n.charCodeAt(r++))return-1}return r}return w.x=b(n,w),w.X=b(r,w),w.c=b(e,w),_.x=b(n,_),_.X=b(r,_),_.c=b(e,_),{format:function(t){var e=b(t+="",w);return e.toString=function(){return t},e},parse:function(t){var e=M(t+="",!1);return e.toString=function(){return t},e},utcFormat:function(t){var e=b(t+="",_);return e.toString=function(){return t},e},utcParse:function(t){var e=M(t+="",!0);return e.toString=function(){return t},e}}}(t),to.format,to.parse,to.utcFormat,to.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var pa=xi((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCMonth(t.getUTCMonth()+e)}),(function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),da=(pa.range,xi((function(t){t.setUTCMinutes(0,0,0)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getUTCHours()}))),ga=(da.range,xi((function(t){t.setUTCSeconds(0,0)}),(function(t,e){t.setTime(+t+6e4*e)}),(function(t,e){return(e-t)/6e4}),(function(t){return t.getUTCMinutes()})));ga.range;var ya=function(t){return"string"==typeof t?new Ut([document.querySelectorAll(t)],[document.documentElement]):new Ut([null==t?[]:t],Dt)},va=function(t){return function(){return t}};function ma(t){this._context=t}ma.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var wa=function(t){return new ma(t)};function _a(t){return t[0]}function xa(t){return t[1]}var ba=function(){var t=_a,e=null,n=va(0),r=xa,i=va(!0),o=null,a=wa,s=null;function l(l){var u,c,f,h,p,d=l.length,g=!1,y=new Array(d),v=new Array(d);for(null==o&&(s=a(p=Kn())),u=0;u<=d;++u){if(!(u<d&&i(h=l[u],u,l))===g)if(g=!g)c=u,s.areaStart(),s.lineStart();else{for(s.lineEnd(),s.lineStart(),f=u-1;f>=c;--f)s.point(y[f],v[f]);s.lineEnd(),s.areaEnd()}g&&(y[u]=+t(h,u,l),v[u]=+n(h,u,l),s.point(e?+e(h,u,l):y[u],r?+r(h,u,l):v[u]))}if(p)return s=null,p+""||null}function u(){return function(){var t=_a,e=xa,n=va(!0),r=null,i=wa,o=null;function a(a){var s,l,u,c=a.length,f=!1;for(null==r&&(o=i(u=Kn())),s=0;s<=c;++s)!(s<c&&n(l=a[s],s,a))===f&&((f=!f)?o.lineStart():o.lineEnd()),f&&o.point(+t(l,s,a),+e(l,s,a));if(u)return o=null,u+""||null}return a.x=function(e){return arguments.length?(t="function"==typeof e?e:va(+e),a):t},a.y=function(t){return arguments.length?(e="function"==typeof t?t:va(+t),a):e},a.defined=function(t){return arguments.length?(n="function"==typeof t?t:va(!!t),a):n},a.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),a):i},a.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),a):r},a}().defined(i).curve(a).context(o)}return l.x=function(n){return arguments.length?(t="function"==typeof n?n:va(+n),e=null,l):t},l.x0=function(e){return arguments.length?(t="function"==typeof e?e:va(+e),l):t},l.x1=function(t){return arguments.length?(e=null==t?null:"function"==typeof t?t:va(+t),l):e},l.y=function(t){return arguments.length?(n="function"==typeof t?t:va(+t),r=null,l):n},l.y0=function(t){return arguments.length?(n="function"==typeof t?t:va(+t),l):n},l.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:va(+t),l):r},l.lineX0=l.lineY0=function(){return u().x(t).y(n)},l.lineY1=function(){return u().x(t).y(r)},l.lineX1=function(){return u().x(e).y(n)},l.defined=function(t){return arguments.length?(i="function"==typeof t?t:va(!!t),l):i},l.curve=function(t){return arguments.length?(a=t,null!=o&&(s=a(o)),l):a},l.context=function(t){return arguments.length?(null==t?o=s=null:s=a(o=t),l):o},l},Ma=(Math.abs,Math.atan2,Math.cos,Math.max,Math.min,Math.sin,Math.sqrt,Math.PI),Ca=2*Ma;var Ia={draw:function(t,e){var n=Math.sqrt(e/Ma);t.moveTo(n,0),t.arc(0,0,n,0,Ca)}},Ta=(Math.sqrt(1/3),Math.sin(Ma/10)/Math.sin(7*Ma/10)),ka=(Math.sin(Ca/10),Math.cos(Ca/10),Math.sqrt(3)),Aa={draw:function(t,e){var n=-Math.sqrt(e/(3*ka));t.moveTo(0,2*n),t.lineTo(-ka*n,-n),t.lineTo(ka*n,-n),t.closePath()}};Math.sqrt(3),Math.sqrt(12);function Ea(t){return t<0?-1:1}function $a(t,e,n){var r=t._x1-t._x0,i=e-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),a=(n-t._y1)/(i||r<0&&-0),s=(o*i+a*r)/(r+i);return(Ea(o)+Ea(a))*Math.min(Math.abs(o),Math.abs(a),.5*Math.abs(s))||0}function Sa(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function Na(t,e,n){var r=t._x0,i=t._y0,o=t._x1,a=t._y1,s=(o-r)/3;t._context.bezierCurveTo(r+s,i+s*e,o-s,a-s*n,o,a)}function Ra(t){this._context=t}function Da(t){this._context=new Ua(t)}function Ua(t){this._context=t}function La(t){return new Ra(t)}Ra.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Na(this,this._t0,Sa(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,Na(this,Sa(this,n=$a(this,t,e)),n);break;default:Na(this,this._t0,n=$a(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(Da.prototype=Object.create(Ra.prototype)).point=function(t,e){Ra.prototype.point.call(this,e,t)},Ua.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,r,i,o){this._context.bezierCurveTo(e,t,r,n,o,i)}};function Pa(){this._=null}function za(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function Fa(t,e){var n=e,r=e.R,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function Ha(t,e){var n=e,r=e.L,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function Oa(t){for(;t.L;)t=t.L;return t}Pa.prototype={constructor:Pa,insert:function(t,e){var n,r,i;if(t){if(e.P=t,e.N=t.N,t.N&&(t.N.P=e),t.N=e,t.R){for(t=t.R;t.L;)t=t.L;t.L=e}else t.R=e;n=t}else this._?(t=Oa(this._),e.P=null,e.N=t,t.P=t.L=e,n=t):(e.P=e.N=null,this._=e,n=null);for(e.L=e.R=null,e.U=n,e.C=!0,t=e;n&&n.C;)n===(r=n.U).L?(i=r.R)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.R&&(Fa(this,n),n=(t=n).U),n.C=!1,r.C=!0,Ha(this,r)):(i=r.L)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.L&&(Ha(this,n),n=(t=n).U),n.C=!1,r.C=!0,Fa(this,r)),n=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var e,n,r,i=t.U,o=t.L,a=t.R;if(n=o?a?Oa(a):o:a,i?i.L===t?i.L=n:i.R=n:this._=n,o&&a?(r=n.C,n.C=t.C,n.L=o,o.U=n,n!==a?(i=n.U,n.U=t.U,t=n.R,i.L=t,n.R=a,a.U=n):(n.U=i,i=n,t=n.R)):(r=t.C,t=n),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((e=i.R).C&&(e.C=!1,i.C=!0,Fa(this,i),e=i.R),e.L&&e.L.C||e.R&&e.R.C){e.R&&e.R.C||(e.L.C=!1,e.C=!0,Ha(this,e),e=i.R),e.C=i.C,i.C=e.R.C=!1,Fa(this,i),t=this._;break}}else if((e=i.L).C&&(e.C=!1,i.C=!0,Ha(this,i),e=i.L),e.L&&e.L.C||e.R&&e.R.C){e.L&&e.L.C||(e.R.C=!1,e.C=!0,Fa(this,e),e=i.L),e.C=i.C,i.C=e.L.C=!1,Ha(this,i),t=this._;break}e.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var qa=Pa;function Wa(t,e,n,r){var i=[null,null],o=ps.push(i)-1;return i.left=t,i.right=e,n&&Ya(i,t,e,n),r&&Ya(i,e,t,r),fs[t.index].halfedges.push(o),fs[e.index].halfedges.push(o),i}function Ba(t,e,n){var r=[e,n];return r.left=t,r}function Ya(t,e,n,r){t[0]||t[1]?t.left===n?t[1]=r:t[0]=r:(t[0]=r,t.left=e,t.right=n)}function ja(t,e,n,r,i){var o,a=t[0],s=t[1],l=a[0],u=a[1],c=0,f=1,h=s[0]-l,p=s[1]-u;if(o=e-l,h||!(o>0)){if(o/=h,h<0){if(o<c)return;o<f&&(f=o)}else if(h>0){if(o>f)return;o>c&&(c=o)}if(o=r-l,h||!(o<0)){if(o/=h,h<0){if(o>f)return;o>c&&(c=o)}else if(h>0){if(o<c)return;o<f&&(f=o)}if(o=n-u,p||!(o>0)){if(o/=p,p<0){if(o<c)return;o<f&&(f=o)}else if(p>0){if(o>f)return;o>c&&(c=o)}if(o=i-u,p||!(o<0)){if(o/=p,p<0){if(o>f)return;o>c&&(c=o)}else if(p>0){if(o<c)return;o<f&&(f=o)}return!(c>0||f<1)||(c>0&&(t[0]=[l+c*h,u+c*p]),f<1&&(t[1]=[l+f*h,u+f*p]),!0)}}}}}function Xa(t,e,n,r,i){var o=t[1];if(o)return!0;var a,s,l=t[0],u=t.left,c=t.right,f=u[0],h=u[1],p=c[0],d=c[1],g=(f+p)/2,y=(h+d)/2;if(d===h){if(g<e||g>=r)return;if(f>p){if(l){if(l[1]>=i)return}else l=[g,n];o=[g,i]}else{if(l){if(l[1]<n)return}else l=[g,i];o=[g,n]}}else if(s=y-(a=(f-p)/(d-h))*g,a<-1||a>1)if(f>p){if(l){if(l[1]>=i)return}else l=[(n-s)/a,n];o=[(i-s)/a,i]}else{if(l){if(l[1]<n)return}else l=[(i-s)/a,i];o=[(n-s)/a,n]}else if(h<d){if(l){if(l[0]>=r)return}else l=[e,a*e+s];o=[r,a*r+s]}else{if(l){if(l[0]<e)return}else l=[r,a*r+s];o=[e,a*e+s]}return t[0]=l,t[1]=o,!0}function Va(t,e){var n=t.site,r=e.left,i=e.right;return n===i&&(i=r,r=n),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(n===r?(r=e[1],i=e[0]):(r=e[0],i=e[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function Ga(t,e){return e[+(e.left!==t.site)]}function Za(t,e){return e[+(e.left===t.site)]}var Qa,Ja=[];function Ka(){za(this),this.x=this.y=this.arc=this.site=this.cy=null}function ts(t){var e=t.P,n=t.N;if(e&&n){var r=e.site,i=t.site,o=n.site;if(r!==o){var a=i[0],s=i[1],l=r[0]-a,u=r[1]-s,c=o[0]-a,f=o[1]-s,h=2*(l*f-u*c);if(!(h>=-gs)){var p=l*l+u*u,d=c*c+f*f,g=(f*p-u*d)/h,y=(l*d-c*p)/h,v=Ja.pop()||new Ka;v.arc=t,v.site=i,v.x=g+a,v.y=(v.cy=y+s)+Math.sqrt(g*g+y*y),t.circle=v;for(var m=null,w=hs._;w;)if(v.y<w.y||v.y===w.y&&v.x<=w.x){if(!w.L){m=w.P;break}w=w.L}else{if(!w.R){m=w;break}w=w.R}hs.insert(m,v),m||(Qa=v)}}}}function es(t){var e=t.circle;e&&(e.P||(Qa=e.N),hs.remove(e),Ja.push(e),za(e),t.circle=null)}var ns=[];function rs(){za(this),this.edge=this.site=this.circle=null}function is(t){var e=ns.pop()||new rs;return e.site=t,e}function os(t){es(t),cs.remove(t),ns.push(t),za(t)}function as(t){var e=t.circle,n=e.x,r=e.cy,i=[n,r],o=t.P,a=t.N,s=[t];os(t);for(var l=o;l.circle&&Math.abs(n-l.circle.x)<ds&&Math.abs(r-l.circle.cy)<ds;)o=l.P,s.unshift(l),os(l),l=o;s.unshift(l),es(l);for(var u=a;u.circle&&Math.abs(n-u.circle.x)<ds&&Math.abs(r-u.circle.cy)<ds;)a=u.N,s.push(u),os(u),u=a;s.push(u),es(u);var c,f=s.length;for(c=1;c<f;++c)u=s[c],l=s[c-1],Ya(u.edge,l.site,u.site,i);l=s[0],(u=s[f-1]).edge=Wa(l.site,u.site,null,i),ts(l),ts(u)}function ss(t){for(var e,n,r,i,o=t[0],a=t[1],s=cs._;s;)if((r=ls(s,a)-o)>ds)s=s.L;else{if(!((i=o-us(s,a))>ds)){r>-ds?(e=s.P,n=s):i>-ds?(e=s,n=s.N):e=n=s;break}if(!s.R){e=s;break}s=s.R}!function(t){fs[t.index]={site:t,halfedges:[]}}(t);var l=is(t);if(cs.insert(e,l),e||n){if(e===n)return es(e),n=is(e.site),cs.insert(l,n),l.edge=n.edge=Wa(e.site,l.site),ts(e),void ts(n);if(n){es(e),es(n);var u=e.site,c=u[0],f=u[1],h=t[0]-c,p=t[1]-f,d=n.site,g=d[0]-c,y=d[1]-f,v=2*(h*y-p*g),m=h*h+p*p,w=g*g+y*y,_=[(y*m-p*w)/v+c,(h*w-g*m)/v+f];Ya(n.edge,u,d,_),l.edge=Wa(u,t,null,_),n.edge=Wa(t,d,null,_),ts(e),ts(n)}else l.edge=Wa(e.site,l.site)}}function ls(t,e){var n=t.site,r=n[0],i=n[1],o=i-e;if(!o)return r;var a=t.P;if(!a)return-1/0;var s=(n=a.site)[0],l=n[1],u=l-e;if(!u)return s;var c=s-r,f=1/o-1/u,h=c/u;return f?(-h+Math.sqrt(h*h-2*f*(c*c/(-2*u)-l+u/2+i-o/2)))/f+r:(r+s)/2}function us(t,e){var n=t.N;if(n)return ls(n,e);var r=t.site;return r[1]===e?r[0]:1/0}var cs,fs,hs,ps,ds=1e-6,gs=1e-12;function ys(t,e){return e[1]-t[1]||e[0]-t[0]}function vs(t,e){var n,r,i,o=t.sort(ys).pop();for(ps=[],fs=new Array(t.length),cs=new qa,hs=new qa;;)if(i=Qa,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===n&&o[1]===r||(ss(o),n=o[0],r=o[1]),o=t.pop();else{if(!i)break;as(i.arc)}if(function(){for(var t,e,n,r,i=0,o=fs.length;i<o;++i)if((t=fs[i])&&(r=(e=t.halfedges).length)){var a=new Array(r),s=new Array(r);for(n=0;n<r;++n)a[n]=n,s[n]=Va(t,ps[e[n]]);for(a.sort((function(t,e){return s[e]-s[t]})),n=0;n<r;++n)s[n]=e[a[n]];for(n=0;n<r;++n)e[n]=s[n]}}(),e){var a=+e[0][0],s=+e[0][1],l=+e[1][0],u=+e[1][1];!function(t,e,n,r){for(var i,o=ps.length;o--;)Xa(i=ps[o],t,e,n,r)&&ja(i,t,e,n,r)&&(Math.abs(i[0][0]-i[1][0])>ds||Math.abs(i[0][1]-i[1][1])>ds)||delete ps[o]}(a,s,l,u),function(t,e,n,r){var i,o,a,s,l,u,c,f,h,p,d,g,y=fs.length,v=!0;for(i=0;i<y;++i)if(o=fs[i]){for(a=o.site,s=(l=o.halfedges).length;s--;)ps[l[s]]||l.splice(s,1);for(s=0,u=l.length;s<u;)d=(p=Za(o,ps[l[s]]))[0],g=p[1],f=(c=Ga(o,ps[l[++s%u]]))[0],h=c[1],(Math.abs(d-f)>ds||Math.abs(g-h)>ds)&&(l.splice(s,0,ps.push(Ba(a,p,Math.abs(d-t)<ds&&r-g>ds?[t,Math.abs(f-t)<ds?h:r]:Math.abs(g-r)<ds&&n-d>ds?[Math.abs(h-r)<ds?f:n,r]:Math.abs(d-n)<ds&&g-e>ds?[n,Math.abs(f-n)<ds?h:e]:Math.abs(g-e)<ds&&d-t>ds?[Math.abs(h-e)<ds?f:t,e]:null))-1),++u);u&&(v=!1)}if(v){var m,w,_,x=1/0;for(i=0,v=null;i<y;++i)(o=fs[i])&&(_=(m=(a=o.site)[0]-t)*m+(w=a[1]-e)*w)<x&&(x=_,v=o);if(v){var b=[t,e],M=[t,r],C=[n,r],I=[n,e];v.halfedges.push(ps.push(Ba(a=v.site,b,M))-1,ps.push(Ba(a,M,C))-1,ps.push(Ba(a,C,I))-1,ps.push(Ba(a,I,b))-1)}}for(i=0;i<y;++i)(o=fs[i])&&(o.halfedges.length||delete fs[i])}(a,s,l,u)}this.edges=ps,this.cells=fs,cs=hs=ps=fs=null}vs.prototype={constructor:vs,polygons:function(){var t=this.edges;return this.cells.map((function(e){var n=e.halfedges.map((function(n){return Ga(e,t[n])}));return n.data=e.site.data,n}))},triangles:function(){var t=[],e=this.edges;return this.cells.forEach((function(n,r){if(o=(i=n.halfedges).length)for(var i,o,a,s,l,u,c=n.site,f=-1,h=e[i[o-1]],p=h.left===c?h.right:h.left;++f<o;)a=p,p=(h=e[i[f]]).left===c?h.right:h.left,a&&p&&r<a.index&&r<p.index&&(l=a,u=p,((s=c)[0]-u[0])*(l[1]-s[1])-(s[0]-l[0])*(u[1]-s[1])<0)&&t.push([c.data,a.data,p.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,e,n){for(var r,i,o=this,a=o._found||0,s=o.cells.length;!(i=o.cells[a]);)if(++a>=s)return null;var l=t-i.site[0],u=e-i.site[1],c=l*l+u*u;do{i=o.cells[r=a],a=null,i.halfedges.forEach((function(n){var r=o.edges[n],s=r.left;if(s!==i.site&&s||(s=r.right)){var l=t-s[0],u=e-s[1],f=l*l+u*u;f<c&&(c=f,a=s.index)}}))}while(null!==a);return o._found=r,null==n||c<=n*n?i.site:null}};Math.SQRT2;function ms(t,e,n){this.k=t,this.x=e,this.y=n}ms.prototype={constructor:ms,scale:function(t){return 1===t?this:new ms(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new ms(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new ms(1,0,0);ms.prototype;function ws(){var t,e=0,n=0;do{t=(e=2*Math.random()-1)*e+(n=2*Math.random()-1)*n}while(0==t||t>1);return e*Math.sqrt(-2*Math.log(t)/t)}function _s(t){return t=(t-0)/1,1/Math.sqrt(2*Math.PI)*Math.exp(-.5*t*t)/1}function xs(t,e,n=!1){const r=function(t){let e=function(t,e){var n=[];for(;n.length<e;){var r=Math.floor(Math.random()*t)+1;-1===n.indexOf(r)&&n.push(r)}return n}(t.positions,t.associated),n=(r=t.positions,i=e,[...Array(r).keys()].filter(t=>!i.includes(t)));var r,i;return{associated:e,non_associated:n}}(t);let i=hi().domain([0,1,5]).range([2,t.associated/2,t.associated]),o=e.map((e,n)=>{e.id=n;let o=Math.round(i(e.risk)),a=Math.round(t.associated-o),s=[];for(let t=0;t<o;t++)s.push({effect:"positive",type:"associated",copy:1,sort_order:0});for(let t=0;t<a;t++)s.push({effect:"negative",type:"associated",copy:1,sort_order:1});s.forEach((t,e)=>{t.position=r.associated[e]});let l=[];for(let t=0;t<o;t++)l.push({effect:"positive",type:"associated",copy:2,sort_order:0});for(let t=0;t<a;t++)l.push({effect:"negative",type:"associated",copy:2,sort_order:1});!function(t,e,n){for(var r,i,o=(null==n?t.length:n)-(e=null==e?0:+e);o;)i=Math.random()*o--|0,r=t[o+e],t[o+e]=t[i+e],t[i+e]=r}(l),l.forEach((t,e)=>{t.position=r.associated[e]});let u=[];for(let e=0;e<t.non_associated;e++)u.push({effect:"neutral",type:"non-associated",copy:1,sort_order:3});u.forEach((t,e)=>{t.position=r.non_associated[e]});let c=[];for(let e=0;e<t.non_associated;e++)c.push({effect:"neutral",type:"non-associated",copy:2,sort_order:3});c.forEach((t,e)=>{t.position=r.non_associated[e]});let f=s.concat(l,u,c);return f.forEach((function(t,e){t.effect_size=Math.random()})),{percentile:e.percentile,values:f,numpos:l.length}});return n&&console.log("sample data",o),o}var bs=n(0);const Ms="#DFA626",Cs="#EF4351",Is="#00A9BA",Ts="#888888",ks="#dfdfdf",As=zt(".scene").node().clientHeight,Es=window.innerWidth,$s=(window.innerHeight,new bs.Controller),Ss=[0,.1,.9,1],Ns=[0,.3,.7,1],Rs=[0,.3,.7,1],Ds=hi().domain([0,.3,.6,1]).range([0,0,1,1]),Us=hi().domain([0,.3]).range([0,1]),Ls=hi().domain([.4,.8]).range([0,1]),Ps=hi().domain([0,.1]).range([0,1]),zs=hi().domain([0,.1]).range([1,0]),Fs=hi().domain([.9,1]).range([1,0]),Hs=hi().domain(Ss).range([0,1,1,0]),Os=(hi().domain(Rs).range([0,1,1,0]),hi().domain([.3,.7]).range([1,0]),hi().domain([0,.3]).range([0,1]),hi().domain([0,.3,1]).range([Ms,Cs,Cs])),qs=(hi().domain([0,.3,1]).range([Ms,"#dfdfdf","#dfdfdf"]),hi().domain([0,.3,1]).range(["#dfdfdf",Ms,Ms]),hi().domain([0,.3,1]).range(["#dfdfdf",Cs,Cs]),hi().domain([0,.3,1]).range([Cs,Cs,"#dfdfdf"]),hi().domain([0,.3,1]).range(["#dfdfdf",Is,Is]),hi().domain([0,.3,1]).range(["#dfdfdf","#888888","#888888"]));hi().domain([0,.3,1]).range(["#dfdfdf","#eaeaea","#eaeaea"]);hi().domain([0,.1,1]).range([1,.3,.3]);function Ws(t){return new bs.Scene({triggerElement:"#"+t,triggerHook:.8,duration:zt("#"+t).node().clientHeight})}class Bs{constructor(t,e,n,r,i,o,a,s,l,u={top:50,right:50,bottom:50,left:50},c={x:"",y:"",plot:""},f={x:"",y:"",color:""}){this.rootId=n,this.parentId=e,this.type=i,this.grid=o,this.width=a,this.height=s,this.padding=u,this.label=c,this.scale=f,this.plotConfigs=l,this.sceneId=r,this.data=t,this._updateConfig()}_updateConfig(){this.innerWidth=this.width-this.padding.left-this.padding.right,this.innerHeight=this.height-this.padding.top-this.padding.bottom,void 0===this.grid&&(this.grid={},this.grid.rows=w(this.plotConfigs.map(t=>t.row))+1,this.grid.rows=1,this.grid.columns=this.data.length),this.plotConfigs.height=this.innerHeight/this.grid.rows;let t=this.innerWidth/this.grid.columns;this.plotConfigs.width=t-.2*t,this.scale={x:hi().domain([0,this.grid.columns]).range([0,this.innerWidth]),y:hi().domain([0,this.grid.rows]).range([0,this.innerHeight])},this.plotConfigs.rootId=""+this.rootId,this.plotConfigs.parentId=this.parentId+"-plot}";let e=this.plotConfigs.positions;this.data.forEach((t,n)=>{t.sceneId=this.sceneId,t.height=this.innerHeight/this.grid.rows,t.width=this.plotConfigs.width,t.x=this.scale.x(n),t.y=this.scale.y(0),t.row=0,t.column=n,t.rootId=""+this.rootId,t.parentId=`${this.parentId}-plot-${t.row}-${t.column}`,t.padding=this.plotConfigs.padding,t.scale=this.plotConfigs.scale,t.data=t.values.filter((function(t){return t.position<=e})),t.grid=this.plotConfigs.grid,t.type=this.plotConfigs.type,t.scroll=this.plotConfigs.scroll,t.colorType=this.plotConfigs.colorType,t.opacityType=this.plotConfigs.opacityType});let n=this.data.map((function(t){return t}));if("riskvariantplot"==this.parentId){let t=_(n,(function(t){return t.column}));n=n.filter((function(e){return e.column!=t}))}this.plotData=n}}class Ys{constructor(t,e,n,r,i={top:50,right:50,bottom:50,left:50},o={x:"",y:"",plot:""},a={x:"",y:""},s={x:void 0,y:void 0},l,u){this.rootId=e,this.parentId=t,this.width=n,this.height=r,this.padding=i,this.label=o,this.scale=a,this.ticks=s,this.grid=l,this.scroll=u,this._updateConfig()}_updateConfig(){this.innerWidth=this.width-this.padding.left-this.padding.right,this.innerHeight=this.height-this.padding.top-this.padding.bottom,this.scale.x=this.scale.x?this.scale.x:"",this.scale.y=this.scale.y?this.scale.y:"",this.label.x=this.label.x?this.label.x:"",this.label.y=this.label.y?this.label.y:"",this.label.plot=this.label.plot?this.label.plot:"",this.ticks.x=this.ticks.x?this.ticks.x:void 0,this.ticks.y=this.ticks.y?this.ticks.y:void 0,this.ticks.height=this.innerHeight/this.grid.rows*.95,this.ticks.width=this.innerWidth/this.grid.columns*.9}}function js(t,e){void 0===t.parentId&&console.error("parentId not provided for creating new group for plot");return zt("#"+t.parentId).append("g").attr("id",`${t.parentId}-${e}`).attr("transform",`translate(${t.padding.left}, ${t.padding.top})`)}function Xs(t,e=!1){let n;n=document.getElementById(t.parentId+"-helixplot")?zt(`#${t.parentId}-helixplot`):js(t,"helixplot");const r=new Ys(t.parentId,t.rootId,t.width,t.height,t.padding,t.label,t.scale,t.ticks,t.grid,t.scroll),i=function(t){return t.scale={torsion:hi().domain([0,1]).range([.4,0])},1==t.scroll.rotate?"FORWARD"==t.scroll.dir?t.scroll.counter=t.scroll.counter+1:t.scroll.counter=t.scroll.counter-1:t.scroll.counter=t.scroll.counter,f(t.grid.rows).map((function(e,n){var r=e*t.scale.torsion(t.scroll.prog)-t.scroll.speed*t.scroll.counter;return[{row:n,y:e,x:Math.cos(r-Math.PI),z:Math.sin(r),fill:ks,stroke:Ts,column:0},{row:n,y:e,x:Math.cos(r),z:Math.sin(r-Math.PI),fill:ks,stroke:Ts,column:1}]}))}(r),o=function(t,e){let n=[];return e.forEach(t=>{t.forEach(t=>{n.push({x:t.x,z:t.z})})}),{z:hi().range([5,1]).domain(u(n,(function(t){return t.z}))),x:hi().range([0,t.innerWidth]).domain(u(n,(function(t){return t.x}))),y:hi().domain([0,t.grid.rows]).range([0,t.innerHeight]),stroke:hi().domain([0,.85,1]).range([5,5,.8*t.ticks.height]),radius:mi().range([.7*t.ticks.height,.2*t.ticks.height]).domain(u(n,(function(t){return t.z}))),unwound:.8}}(r,i);let a=n.selectAll("g").data(i);a.exit().remove(),a.enter().append("g").attr("class",(function(e,n){return`column-${t.column} row-${n}`})).attr("id",(function(e,n){return`column-${t.column}-row-${n}`})).merge(a).transition().duration(500).attr("class",(function(e,n){return`column-${t.column} row-${n}`})).attr("id",(function(e,n){return`column-${t.column}-row-${n}`})).each((function(t){zt(this).selectAll("circle").remove(),zt(this).selectAll("line").remove();var e=o.x(t[1].x)<o.x(t[0].x)?1:-1;zt(this).append("line").attr("class","helix-bar").attr("y2",o.y(t[0].y)).attr("y1",o.y(t[0].y)).attr("x1",(function(){return r.scroll.prog>=o.unwound?o.x(t[0].x)+e*o.z(t[0].z):o.x(t[0].x)+e*o.z(t[0].z)-e*o.radius(t[0].z)})).attr("x2",(function(){return r.scroll.prog>=o.unwound?o.x(t[1].x)+e*o.z(t[1].z):o.x(t[1].x)+e*o.z(t[1].z)+e*o.radius(t[1].z)})).attr("stroke",(function(t){return t[0].fill})).attr("stroke-width",o.stroke(r.scroll.prog)).attr("opacity",(function(t){return r.scroll.prog>=o.unwound?1:e*(t[0].x-t[1].x)*.3})),zt(this).selectAll("circle").data(t).enter().append("circle").attr("class",(function(t,e){return"helix-circle helix-circle-"+e})).attr("cx",(function(t){return o.x(t.x)})).attr("cy",(function(t){return o.y(t.y)})).attr("r",(function(t){return r.scroll.prog>o.unwound?0:o.radius(t.z)})).attr("stroke",t=>t.stroke).attr("fill",(function(t){return t.fill})).attr("opacity",(function(t){return r.scroll.prog>=o.unwound?1:o.z(t.z)/5}))})),n.selectAll(".row-3").selectAll(".helix-circle-0").moveToBack(),n.selectAll(".row-4").selectAll(".helix-circle-0").moveToBack(),n.selectAll(".row-5").selectAll(".helix-circle-0").moveToBack(),n.selectAll(".row-12").selectAll(".helix-circle-1").moveToBack()}Pt.prototype.moveToBack=function(){return this.each((function(){var t=this.parentNode.firstChild;t&&this.parentNode.insertBefore(this,t)}))};class Vs{constructor(t,e,n,r,i,o,a,s={top:50,right:50,bottom:50,left:50},l={x:"",y:"",color:""},u,c){this.data=t,this.parentId=e,this.rootId=n,this.type=r,this.grid=i,this.width=o,this.height=a,this.padding=s,this.scale=l,this.colorType=u,this.opacityType=c,this._createData(),this._updateConfig()}_createData(){var t;if("towerplot-stack"==this.type){let e=(t=this.data.map((function(t){return t})).filter((function(t){return"neutral"!=t.effect}))).filter((function(t){return"negative"==t.effect})).sort((function(t,e){return r(t.effect_size,e.effect_size)})),n=t.filter((function(t){return"positive"==t.effect})).sort((function(t,e){return function(t,e){return e<t?-1:e>t?1:e>=t?0:NaN}(t.effect_size,e.effect_size)}));(t=n.concat(e)).forEach((function(t,e){t.x=1,t.y=e}))}else(t=this.data.map((function(t){return t}))).forEach((function(t){t.x=t.copy,t.y=t.position}));this.plotData=t}_updateConfig(){this.innerHeight=this.height-this.padding.top-this.padding.bottom;let t,e,n,r=function(t){let e=zr().domain(["neutral","positive","negative"]);"grey"==t.colorType?e.range(["#dfdfdf","#dfdfdf","#dfdfdf"]):"greyRed"==t.colorType?e=zr().domain(["neutral","positive","negative"]).range(["#dfdfdf",Cs,"#dfdfdf"]):"greyRedTeal"==t.colorType&&(e=zr().domain(["neutral","positive","negative"]).range(["#dfdfdf",Cs,Is]));return e}(this),i=function(t){let e,n=hi().domain([0,1]);"normal"==t.opacityType?(n.range([1,1]),e=1):(n.range([.2,1]),e=.3);return{opacity:n,neutral:e}}(this);"towerplot-stack"==this.type?(t=this.width,e=[1,2],n=[0,t]):"towerplot-pair"==this.type&&(t=this.width/2,e=[1,2],n=[0,t]),t>=120&&(t=120);let o={x:hi().domain(e).range(n),y:hi().domain(u(this.plotData.map(t=>t.y))).range([this.innerHeight,0]),color:r,height:this.innerHeight/w(this.plotData.map(t=>t.y)),opacity:i.opacity};this.plotData.forEach((function(e){e.x=o.x(e.x),e.y=o.y(e.y),e.color=o.color(e.effect),e.height=.96*o.height,e.width=t-.1*t,"neutral"==e.effect?e.opacity=i.neutral:e.opacity=o.opacity(e.effect_size)})),this.scale=o}}function Gs(t,e,n=!1){const r=new Vs(e,t.parentId,t.rootId,t.type,t.grid,t.width,t.height,t.padding,t.scale,t.colorType,t.opacityType);let i,o;i=document.getElementById(t.parentId+"-towerplot")?zt(`#${t.parentId}-towerplot`):js(t,"towerplot"),o="psplot-individual"==t.sceneId?"psplot-plot-0-3"==r.parentId?r.plotData:[]:r.plotData;var a=i.selectAll(`.${r.parentId}-rect `).data(o);a.enter().append("rect").attr("class",(function(){return r.parentId+"-rect towerplot-rect"})).attr("x",(function(t){return t.x})).attr("y",(function(t){return t.y})).attr("width",(function(t){return t.width})).attr("height",(function(t){return t.height})).attr("fill",t=>t.color).attr("stroke","white").style("stroke-width",.25).style("opacity",(function(t){return t.opacity})).merge(a).transition().duration(500).attr("class",(function(){return r.parentId+"-rect towerplot-rect"})).attr("x",(function(t){return t.x})).attr("y",(function(t){return t.y})).attr("width",(function(t){return t.width})).attr("height",(function(t){return t.height})).style("opacity",(function(t){return t.opacity})).attr("fill",t=>t.color).attr("stroke","white").style("stroke-width",.25),a.exit().remove()}function Zs(t,e,n=!1){const r=t.parentId,i=document.getElementById(t.rootId+"-svg"),o=document.getElementById(`${t.rootId}-${r}`);let a;i?a=o?zt(`#${t.rootId}-${r}`).attr("transform",`translate(${t.padding.left}, ${t.padding.top})`):Qs(t,r):(!function(t){zt("#"+t.rootId).append("svg").attr("id",t.rootId+"-svg").attr("width",t.width).attr("height",t.height)}(t),a=o?zt(`#${t.parentId}-${r}`).attr("transform",`translate(${t.padding.left}, ${t.padding.top})`):Qs(t,r));const s=new Bs(e,t.parentId,t.rootId,t.sceneId,t.type,t.grid,t.width,t.height,t.plotConfigs,t.padding,t.label,t.scale,t.ticks);var l=a.selectAll(`.${s.parentId}-plot`).data(s.plotData);l.exit().remove(),l.enter().append("g").attr("class",s.parentId+"-plot").attr("id",t=>`${s.parentId}-plot-${t.row}-${t.column}`).merge(l).attr("class",s.parentId+"-plot").attr("id",t=>`${s.parentId}-plot-${t.row}-${t.column}`).attr("transform",t=>`translate(${t.x}, ${t.y})`).each(t=>{"helixplot"==t.type?Xs(t,t.data):"towerplot-stack"==t.type||"towerplot-pair"==t.type?Gs(t,t.data,n):console.log("unknown plot type")})}function Qs(t,e){return zt(`#${t.rootId}-svg`).append("g").attr("id",`${t.rootId}-${e}`).attr("transform",`translate(${t.padding.left}, ${t.padding.top})`)}let Js,Ks;Js=Es>=800?{top:10,right:.3*zt("#variant-plot-wrapper").node().clientWidth,bottom:10,left:.3*zt("#variant-plot-wrapper").node().clientWidth}:{top:40,right:0,bottom:10,left:140};const tl={rootId:"variant-plot-wrapper",parentId:"helixplot",width:zt("#variant-plot-wrapper").node().clientWidth,height:zt("#variant-plot-wrapper").node().clientHeight,grid:{rows:1,columns:2},type:"helixplot",plotConfigs:{positions:20,padding:{top:0,right:0,bottom:0,left:0},type:"helixplot",grid:{rows:30,columns:2},scroll:{prog:0,counter:0,speed:.2,dir:""}},padding:Js};let el,nl,rl=0;function il(t=tl,e,n,r=!1){r&&console.log("HelixPlot config",t),Zs(t,e,!1),"espanol"==n?Ks=["unidades de información","variantes genéticas"]:"english"==n&&(Ks=["unit of information","genetic variant"]),function(t,e,n){let r=zt("#"+t),i=r.selectAll("."+e),o=parseInt(i.selectAll("line").attr("y1")),a=i.selectAll("line").attr("stroke-width")/2;o+=a;let s=r.append("g").attr("class",n).attr("transform",`translate(0,${o})`).style("opacity",0);s.append("text").attr("x",-50).attr("class","plot-label").attr("text-anchor","end").attr("dy",4).style("fill","#888888").html(Ks[0]),s.append("line").attr("class","label-line").attr("x1",-10).attr("x2",-40).attr("y1",0).attr("y2",0).attr("stroke","black")}("helixplot-plot-0-0","row-0","helix-label"),function(t,e){Ws("genetic-variation-genetic-code").on("enter",(function(t){ya(".helixplot-plot").transition().duration(500).style("opacity",1)})).on("progress",(function(e){ya(".helix-label").style("opacity",Ps(e.progress)),function(t,e){let n=ya(`.${t.parentId}-plot`).selectAll(".row-0");n.selectAll("line").style("stroke",qs(e.progress)),n.selectAll("circle").style("fill",qs(e.progress))}(t,e)})).addTo($s),Ws("genetic-variation-variant").on("enter",(function(t){ya(".helixplot-plot").transition().duration(500).style("opacity",1)})).on("progress",(function(n){t.plotConfigs.scroll.prog=Ds(n.progress),Zs(t,e,!1),function(t,e){"FORWARD"==e.scrollDirection?rl+=1:rl-=1;rl>=9?rl=9:rl<=0&&(rl=0);rl=Math.round(rl);const n=hi().domain(Ns).range([0,9,9]),r=ya(`.${t.parentId}-plot`),i=ya(".helix-label");let o=Math.round(n(e.progress)),a=r.selectAll(".row-"+o),s=a.selectAll("line").attr("y1");if(r.selectAll("circle").style("fill",(function(t){return t.fill})),r.selectAll("line").style("stroke",(function(t){return t.stroke})),i.attr("transform",`translate(0,${s})`),9==o){i.style("opacity",1),a.selectAll("circle").style("fill","#888888"),a.selectAll("line").style("stroke","#888888");let t=r.select("#column-0-row-9");t.selectAll("circle").style("fill",Ms).style("stroke",Ms).style("opacity",1),t.selectAll("line").style("stroke",Ms),i.selectAll("text").html(Ks[1]).style("fill",Ms)}else 0==o?(i.style("opacity",1),i.selectAll("text").html(Ks[0]).style("fill","#888888"),a.selectAll("circle").style("fill","#888888"),a.selectAll("line").style("stroke","#888888")):(i.style("opacity",0),a.selectAll("circle").style("fill","#888888"),a.selectAll("line").style("stroke","#888888"))}(t,n)})).on("leave",(function(t){"FORWARD"==t.scrollDirection&&ya(".helixplot-plot").transition().duration(500).style("opacity",0)})).addTo($s)}(t,e)}class ol{constructor(t,e,n,r,i,o,a,s,l,u,c={top:50,right:50,bottom:50,left:50}){this.elementId=e,this.parentId=n,this.rootId=r,this.type=i,this.grid=o,this.width=s,this.height=l,this.plotConfigs=u,this.padding=c,this.data=t,this.color=a,this._updateConfig(),this._updateData()}_updateConfig(){this.innerWidth=this.width-this.padding.left-this.padding.right,this.innerHeight=this.height-this.padding.top-this.padding.bottom,void 0===this.grid&&(this.grid={},this.grid.rows=1,this.grid.columns=this.plotConfigs.length),this.plotConfigs.height=this.innerHeight/this.grid.rows,this.plotConfigs.width=this.innerWidth/this.grid.columns,this.plotConfigs.innerHeight=this.plotConfigs.height-this.plotConfigs.padding.top-this.plotConfigs.padding.bottom,this.plotConfigs.innerWidth=this.plotConfigs.width-this.plotConfigs.padding.left-this.plotConfigs.padding.right}_updateData(){let t;t="variantplotfigures"==this.parentId||"pscalcplotfigures"==this.parentId?hi().domain([500,800,1200]).range([.75,3,6,6]):hi().domain([500,800,1200]).range([.5,.5,3,3]),this.scale={x:hi().domain([0,this.grid.columns]).range([0,this.innerWidth]),y:hi().domain([0,this.grid.rows]).range([this.innerHeight,0]),pathScale:t};let e,n,r,i=this.plotConfigs.innerWidth;Es>=800?(e=i/4,r=this.plotConfigs.innerWidth,n=.8*this.padding.bottom):(e=0,r=this.plotConfigs.innerWidth,n=.5*this.padding.bottom);let o=this.padding.top,a=this.scale.y(0);var s=[];for(let t=0;t<this.grid.columns;t++)for(let i=0;i<this.grid.rows;i++)s.push({color:"#dfdfdf",x:this.scale.x(t)+e,y:this.scale.y(i)+o,column:t,row:i,size:this.scale.pathScale(this.innerWidth),width:r,height:n});if("single"==this.color.type)s.forEach((function(t){t.color="#dfdfdf"}));else if("binary"==this.color.type)if("variantplotfigures"==this.parentId)s.forEach((function(t){0==t.column?t.color=Cs:t.color="#dfdfdf"}));else{let t=_(s,(function(t){return t.column}));(s=s.filter((function(e){return e.column!=t}))).forEach((function(e){e.column>t-1?e.color=Cs:e.column<=t-1&&(e.color="#dfdfdf")}))}else if("binary-row"==this.color.type){let t=_(s,(function(t){return t.column}));(s=s.filter((function(e){return e.column!=t}))).forEach((function(e){e.y=a,e.column>t-1?e.color=Cs:e.column<=t-1&&(e.color="#dfdfdf")}))}this.plotData=s}}function al(t,e=!1){const n=t.parentId,r=document.getElementById(t.rootId+"-svg"),i=document.getElementById(`${t.rootId}-${n}`);let o;r?o=i?zt(`#${t.rootId}-${n}`).attr("transform",`translate(${t.padding.left}, ${t.padding.top})`):sl(t,n):(!function(t){zt("#"+t.rootId).append("svg").attr("id",t.rootId+"-svg").attr("width",t.width).attr("height",t.height)}(t),o=i?zt(`#${t.parentId}-${n}`).attr("transform",`translate(${t.padding.left}, ${t.padding.top})`):sl(t,n));const a=new ol(t.data,t.elementId,t.parentId,t.rootId,t.type,t.grid,t.color,t.width,t.height,t.plotConfigs,t.padding);e&&console.log("FigurePlot: render()",a);let s=o.selectAll(`.${a.parentId}-${a.elementId}`).data(a.plotData);s.enter().append("g").attr("class",(function(t){return`${a.parentId}-${a.elementId} ${a.elementId}-row-${t.row} ${a.elementId}-column-${t.column} `})).attr("transform",(function(t){return`translate(${t.x},${t.y})`})).merge(s).transition().duration(500).attr("class",(function(t){return`${a.parentId}-${a.elementId} ${a.elementId}-row-${t.row} ${a.elementId}-column-${t.column} ${a.parentId}-${t.column}`})).attr("transform",(function(t){return`translate(${t.x},${t.y})`})).each((function(e,n){let r;r=Es>=800?.3:.5;let i=zt(this);"variantplotfigures"==a.parentId?(i.selectAll(".figure-svg").remove(),i.append("svg:image").attr("class","figure-svg").attr("xlink:href",`images/figure-${t.src}-${n}.svg`).attr("width",e.width*r).attr("x",0).attr("y",8)):(i.selectAll("path").remove(),i.append("path").attr("d","M16.9,10.3l-0.5,11.4c-0.1,1.3-1,2.3-2.3,2.4l0,0l-1.1,12.7c0,1.5-0.8,2.7-1.7,2.7H6.8c-0.9,0-1.7-1.2-1.7-2.7L4,24.1l0,0C2.7,24,1.7,23,1.7,21.7L1.1,10.3c0-1.3,1.2-2.1,2.7-2.1h2.7C5.4,7.5,4.7,6.2,4.8,4.8c0-2.4,1.9-4.3,4.3-4.3c2.4,0,4.3,1.9,4.3,4.3c0,1.4-0.7,2.7-1.8,3.5h2.6C15.6,8.2,16.9,9,16.9,10.3z").attr("fill",e.color).attr("x",0).attr("y",0))})),s.exit().remove()}function sl(t,e){return zt(`#${t.rootId}-svg`).append("g").attr("id",`${t.rootId}-${e}`).attr("transform",`translate(${t.padding.left}, ${t.padding.top})`)}Es>=800?(el=200,nl=10):(el=80,nl=10);const ll={rootId:"variant-plot-wrapper",parentId:"variantplot",width:zt("#variant-plot-wrapper").node().clientWidth,height:zt("#variant-plot-wrapper").node().clientHeight,grid:{rows:1,columns:3},type:"towerplot-pair",plotConfigs:{positions:30,padding:{top:0,right:0,bottom:0,left:0},type:"towerplot-pair",grid:{rows:void 0,columns:2},scale:{x:"",y:"",color:""},colorType:"grey",opacityType:"normal",scroll:{prog:0,counter:0,speed:.2}},padding:{top:nl,right:0,bottom:el,left:100}},ul={rootId:"variant-plot-wrapper",parentId:"variantplotfigures",elementId:"node",width:zt("#variant-plot-wrapper").node().clientWidth,height:zt("#variant-plot-wrapper").node().clientHeight,src:"phenotype",color:{type:"single",fill:!0},plotConfigs:{src:"",padding:{top:0,right:0,bottom:0,left:0},scroll:{prog:0,counter:0,speed:.2}},grid:{rows:1,columns:3},padding:{top:nl,right:0,bottom:el,left:100}};let cl,fl,hl,pl,dl;function gl(t=ll,e=ul,n,r){const i=e;Zs(t,n,!1),function(t){const e=zt(`#${t.parentId}-plot-0-0`),n=zt(`#${t.parentId}-plot-0-1`),r=zt(`#${t.parentId}-plot-0-2`);e.selectAll(".towerplot-rect").style("fill","#dfdfdf").filter((t,e)=>10==t.position&&1==t.copy||27==t.position&&2==t.copy).style("fill",Ms).classed("yellow",!0),n.selectAll(".towerplot-rect").style("fill","#dfdfdf").filter((t,e)=>27==t.position||5==t.position&&1==t.copy).style("fill",Ms).classed("yellow",!0),r.selectAll(".towerplot-rect").style("fill","#dfdfdf").filter((t,e)=>27==t.position&&1==t.copy||5==t.position&&2==t.copy).style("fill",Ms).classed("yellow",!0)}(t),zt(`#${t.rootId}-${t.parentId}`).attr("opacity",0);let o=zt(`#${t.parentId}-plot-0-0`).append("g").attr("class",t.parentId+"-plot-0-0-label");o.append("text"),o.append("line"),"espanol"==r?cl=["variantes de riesgo"]:"english"==r&&(cl=["risk variant"]),function(t,e,n){Ws("genetic-variation-group-variant").on("enter",(function(n){zt("#riskvariant-plot-wrapper-riskvariantplot").attr("opacity",0),zt(`#${t.rootId}-${t.parentId}`).transition().duration(500).style("opacity",1),e.src="phenotype",e.color.type="single",al(e,void 0),ya(`.${e.parentId}-${e.elementId}`).transition().duration(500).style("opacity",1)})).on("leave",(function(n){"FORWARD"==n.scrollDirection?(zt(`#${t.rootId}-${t.parentId}`).transition().duration(500).style("opacity",1),ya(`.${e.parentId}-${e.elementId}`).transition().duration(500).style("opacity",1)):(ya(`.${e.parentId}-${e.elementId}`).transition().duration(500).style("opacity",0),zt(`#${t.rootId}-${t.parentId}`).transition().duration(500).style("opacity",0))})).addTo($s),Ws("genetic-variation-group-disease-variant").on("enter",(function(n){zt(`#${t.rootId}-${t.parentId}`).transition().duration(500).style("opacity",1),zt("#riskvariant-plot-wrapper-riskvariantplot").attr("opacity",0),e.src="disease",e.color.type="binary",al(e,void 0),ya(`.${e.parentId}-${e.elementId}`).transition().duration(500).style("opacity",1)})).on("progress",(function(e){!function(t,e){let n=zt(`#${t.parentId}-plot-0-0`).selectAll(".towerplot-rect").filter((t,e)=>10==t.position&&1==t.copy),r=parseInt(n.attr("height"))/2,i=parseInt(n.attr("y"));n.style("fill",Os(e));let o=ya(".variantplot-plot-0-0-label");o.style("opacity",Us(e)).attr("transform",`translate( -25 , ${i+r} )`),o.selectAll("text").style("fill",Cs).attr("dy",4).attr("text-anchor","end").classed("plot-label",!0).html(cl[0]),o.selectAll("line").attr("x1",5).attr("x2",20).attr("y1",0).attr("y2",0).attr("stroke","black")}(t,e.progress)})).addTo($s)}(t,i)}Es>=800?(fl=21,hl=100,pl=20):(fl=11,hl=80,pl=20);const yl={rootId:"riskvariant-plot-wrapper",parentId:"riskvariantplot",width:ya(".plot-wrapper").node().clientWidth,height:ya(".plot-wrapper").node().clientHeight,grid:{rows:1,columns:fl},type:"towerplot-pair",plotConfigs:{positions:80,padding:{top:0,right:5,bottom:0,left:5},type:"towerplot-pair",grid:{rows:void 0,columns:2},scale:{x:"",y:"",color:""},colorType:"grey",opacityType:"normal",scroll:{prog:0,counter:0,speed:.2}},padding:{top:pl,right:-5,bottom:hl,left:5}},vl={rootId:"riskvariant-plot-wrapper",parentId:"riskvariantplotfigures",elementId:"node",width:ya(".plot-wrapper").node().clientWidth,height:ya(".plot-wrapper").node().clientHeight,color:{type:"single",fill:!0},plotConfigs:{src:"",padding:{top:0,right:5,bottom:0,left:5},type:"force",scroll:{prog:0,counter:0,speed:.2}},grid:{rows:8,columns:fl},padding:{top:0,right:-10,bottom:hl-20,left:10}};function ml(t=yl,e=vl,n,r){"espanol"==r?dl=["sin enfermedad","con enfermedad"]:"english"==r&&(dl=["without disorder","with disorder"]);var i=e;Zs(t,n,void 0),zt(`#${t.rootId}-${t.parentId}`).attr("opacity",0),i.color.type="single",al(i,void 0),function(t){const e=zt(`#${t.rootId}-${t.parentId}`);e.selectAll(`.${t.parentId}-label`).remove(),e.append("text").html(dl[0]).attr("class",`plot-title ${t.parentId}-label`).attr("text-anchor","middle").attr("transform",`translate(${t.width/4}, 0)`).style("opacity",0),e.append("text").html(dl[1]).attr("class",`plot-title ${t.parentId}-label`).attr("text-anchor","middle").attr("transform",`translate(${t.width/4+(t.width-t.padding.left-t.padding.right)/2}, 0)`).style("opacity",0)}(i),function(t,e,n){Ws("riskvariant-group").on("enter",(function(e){zt(`#${t.rootId}-${t.parentId}`).attr("opacity",0)})).on("progress",(function(n){n.progress<=.3?(e.color.type="single",al(e,void 0),ya(`.${e.parentId}-label`).transition().duration(500).style("opacity",0)):(e.color.type="binary",al(e,void 0),ya(`.${e.parentId}-label`).transition().duration(500).style("opacity",1),zt(`#${t.rootId}-${t.parentId}`).transition().duration(500).style("opacity",0))})).addTo($s),Ws("riskvariant-increase").on("enter",(function(){e.color.type="binary-row",al(e,void 0),t.plotConfigs.colorType="greyRed",t.plotConfigs.opacityType="normal",Zs(t,n,!1),zt(`#${t.rootId}-${t.parentId}`).transition().duration(500).style("opacity",1)})).addTo($s),Ws("riskvariant-decrease").on("enter",(function(){e.color.type="binary-row",al(e,void 0),t.plotConfigs.colorType="greyRedTeal",t.plotConfigs.opacityType="normal",Zs(t,n,!1)})).addTo($s),Ws("riskvariant-magnitude-1").on("enter",(function(e){t.plotConfigs.colorType="greyRedTeal",t.plotConfigs.opacityType="normal",Zs(t,n,!1)})).on("leave",(function(e){"FORWARD"==e.scrollDirection&&(t.plotConfigs.colorType="greyRedTeal",t.plotConfigs.opacityType="effectSize",Zs(t,n,!1))})).addTo($s);Ws("riskvariant-magnitude-2").addTo($s);Ws("riskvariant-leave").addTo($s)}(t,i,n)}class wl{constructor(t,e,n,r,i,o,a,s,l,c={top:50,right:50,bottom:50,left:50}){this.data=t,this.parentId=e,this.rootId=n,this.type=r,this.bins=o,this.size=a,this.width=s,this.height=l,this.padding=c,this.color=i,this.innerWidth=this.width-this.padding.left-this.padding.right,this.innerHeight=this.height-this.padding.bottom,t=t.filter((function(t){return t.q>=-2.4&&t.q<=2.4}));let f=[-2.4,-1.6,-.8,0,.8,1.6,2.4];this.scale={q:hi().range([0,this.innerWidth]).domain(u(t,(function(t){return t.q}))),p:hi().range([this.height-this.padding.bottom,this.padding.top]).domain(u(t,(function(t){return t.p}))),q_:hi().range(u(t,(function(t){return t.q}))).domain([0,this.innerWidth]),color:hi().domain(f).range(["#008799",Is,"#dfdfdf","#dfdfdf","#dfdfdf",Cs,"#B70016"]),red:hi().domain(f).range(["#dfdfdf","#dfdfdf","#dfdfdf","#dfdfdf","#dfdfdf",Cs,"#B70016"]),bin:hi().range([-10,this.innerWidth-10]).domain([0,this.bins]),stack:hi().range([this.innerHeight,this.padding.top]).domain([1,this.innerHeight/this.size.height])},this._createData()}_createData(){var t=[],e=[];let n=this.scale,i=this,o=this.size,a=[...new Array(this.bins+1)];o.width=Es>=800?o.width:.85*o.width,"distribution"==this.type?(a.forEach((function(t,i){let a=n.bin(i)-o.width,s=n.q_(a),l=_s(s),u={bin:i,x:n.q(s),q:s,p:l,y:n.p(l),r:o.height+5};e.push(u),e.sort((function(t,e){return r(t.bin,e.bin)})),e=e.filter((function(t){return 0!=t.bin}))})),e.forEach((function(e){let r;r="grey"==i.color?"#dfdfdf":"red"==i.color?n.red(e.q):n.color(e.q);let a=Math.ceil((i.innerHeight-e.y-i.size.height/4)/o.height);a<=1&&(a=1);let s=[...new Array(a)],l=[];s.forEach((function(n,o){let a={x0:e.x,x:0,y0:e.y,y:o*e.r,r:e.r,q:e.q,p:e.p,width:i.size.width,height:i.size.height,color:r};t.push(l),l.push(a)})),e.values=l}))):"grid"==this.type&&(a.forEach((function(t,i){let a=n.bin(i)-o.width,s=n.q_(a),l=_s(s),u={bin:i,x:n.q(s),q:s,p:l,y:.5*ya(".plot-wrapper").node().clientHeight,r:o.height+5};e.push(u),e.sort((function(t,e){return r(t.bin,e.bin)})),e=e.filter((function(t){return 0!=t.bin}))})),e.forEach((function(e){let r;r="grey"==i.color?"#dfdfdf":"red"==i.color?n.red(e.q):n.color(e.q);let a=Math.ceil((i.height-e.y)/o.height);a<=1&&(a=1);let s=[...new Array(a)],l=[];s.forEach((function(n,o){let a={x0:e.x,x:0,y0:e.y,y:0,r:e.r,q:e.q,p:e.p,width:i.size.width,height:i.size.height,color:r};t.push(l),l.push(a)})),e.values=l}))),this.flatData=t.flat(),this.plotData=e}}class _l{constructor(t,e,n,r,i,o,a,s,l,u={top:50,right:50,bottom:50,left:50},c={x:"",y:"",plot:""},f={x:"",y:"",color:""}){this.rootId=n,this.parentId=e,this.type=i,this.grid=o,this.width=a,this.height=s,this.padding=u,this.label=c,this.scale=f,this.plotConfigs=l,this.sceneId=r,this.data=t,this._updateConfig()}_updateConfig(){this.innerWidth=this.width-this.padding.left-this.padding.right,this.innerHeight=this.height-this.padding.top-this.padding.bottom,void 0===this.grid&&(this.grid={},this.grid.rows=w(this.plotConfigs.map(t=>t.row))+1,this.grid.rows=1,this.grid.columns=this.data.length),this.plotConfigs.height=this.innerHeight/this.grid.rows;let t=this.innerWidth/this.grid.columns;this.plotConfigs.width=t-.2*t,this.scale={x:hi().domain([0,this.grid.columns]).range([0,this.innerWidth]),y:hi().domain([0,this.grid.rows]).range([0,this.innerHeight])},this.plotConfigs.rootId=""+this.rootId,this.plotConfigs.parentId=this.parentId+"-plot}";let e=this.plotConfigs.positions;this.data.forEach((t,n)=>{t.sceneId=this.sceneId,t.height=this.innerHeight/this.grid.rows,t.width=this.plotConfigs.width,t.x=this.scale.x(n),t.y=this.scale.y(0),t.row=0,t.column=n,t.rootId=""+this.rootId,t.parentId=`${this.parentId}-plot-${t.row}-${t.column}`,t.padding=this.plotConfigs.padding,t.scale=this.plotConfigs.scale,t.data=t.values.filter((function(t){return t.position<=e})),t.grid=this.plotConfigs.grid,t.type=this.plotConfigs.type,t.scroll=this.plotConfigs.scroll,t.colorType=this.plotConfigs.colorType,t.opacityType=this.plotConfigs.opacityType});let n=this.data.map((function(t){return t}));"riskvariantplot"==this.parentId&&(n=n.filter((function(t){return 10!=t.column}))),this.plotData=n}}function xl(t,e,n,r=!1){let i;i="psplot-individual"==t.sceneId?Array.from(n).filter((t,e)=>t.percentile>=47&&t.percentile<=53):Array.from(n).filter((t,e)=>e%4==0);const o=new _l(i,t.parentId,t.rootId,t.sceneId,t.type,t.grid,t.width,t.height,t.plotConfigs,t.padding,t.label,t.scale,t.ticks);let a=o.plotData;var s=e.selectAll(`.${o.parentId}-plot`).data(a);s.exit().remove(),s.enter().append("g").attr("class",o.parentId+"-plot").merge(s).attr("class",o.parentId+"-plot").attr("id",(t,e)=>`${o.parentId}-plot-${t.row}-${t.column}`).attr("transform",e=>"psplot-individual"==t.sceneId&&3==e.column?`translate(${t.width/2-e.width/2},${e.y})`:`translate(${e.x}, ${e.y})`).each(n=>{if(Gs(n,n.data,r),"psplot-individual"==t.sceneId&&3==n.column){e.selectAll(".single-figure").remove(),zt("#psplot-plot-0-3").append("g").attr("class","single-figure").attr("transform",(function(e){return Es>=800?`translate(10,${t.height+5})scale(4)`:`translate(10,${t.height+5})scale(1.25)`})).append("path").attr("d","M16.9,10.3l-0.5,11.4c-0.1,1.3-1,2.3-2.3,2.4l0,0l-1.1,12.7c0,1.5-0.8,2.7-1.7,2.7H6.8c-0.9,0-1.7-1.2-1.7-2.7L4,24.1l0,0C2.7,24,1.7,23,1.7,21.7L1.1,10.3c0-1.3,1.2-2.1,2.7-2.1h2.7C5.4,7.5,4.7,6.2,4.8,4.8c0-2.4,1.9-4.3,4.3-4.3c2.4,0,4.3,1.9,4.3,4.3c0,1.4-0.7,2.7-1.8,3.5h2.6C15.6,8.2,16.9,9,16.9,10.3z").attr("fill","#dfdfdf")}})}function bl(t,e,n,r,i){let o;o="average"==i[0]||"promedio"==i[0]?"#888888":"significantly increased"==i[0]||"mayor riesgo"==i[0]?Cs:"#008799",e.select("#ps-flag").remove();let a=e.append("g").attr("id","ps-flag").attr("transform",`translate(${n-r}, 0)`).attr("opacity",0);a.append("rect").attr("x",0).attr("y",0).attr("width",300).attr("height",72).attr("stroke","#dfdfdf").attr("fill",o),a.append("text").attr("x",150).attr("y",0).attr("text-anchor","middle").attr("dy",24).attr("class","label-md ps-flag-banner").attr("id","flag-banner-label").html(""+i[0]),a.append("rect").attr("x",0).attr("y",30).attr("width",300).attr("height",120).attr("stroke","#dfdfdf").attr("fill","white"),a.append("text").attr("x",15).attr("y",45).attr("dy",30).html((function(){var t=zt(this).attr("x");return`<tspan class='flag-label' x=${+t} dy=30>${i[1]} </tspan>\n    <tspan class='flag-label bold' style='fill:${o}' x=${+t} dy=30>${i[2]}</tspan>`})),a.append("line").attr("id","flag-line").attr("x1",r).attr("x2",r).attr("y1",150).attr("y2",t.innerHeight-150).style("stroke","black").attr("opacity",0)}function Ml(t,e,n,r){let i=hi().range([0,t.innerWidth]).domain(u(n,(function(t){return t.q})));e.selectAll("defs").remove(),e.selectAll("rect").remove(),function(t,e,n){var r=n.append("linearGradient").attr("id","linear-gradient").attr("x1","0%").attr("y1","0%").attr("x2","100%").attr("y2","0%");function i(n){return Math.abs(e(n))/t.innerWidth*100+"%"}r.append("stop").attr("class","start").attr("offset",i(-2.4)).attr("stop-color",Is).attr("stop-opacity",1),r.append("stop").attr("class","start").attr("offset",i(-1.6)).attr("stop-color","#84CACE").attr("stop-opacity",1),r.append("stop").attr("class","start").attr("offset",i(-.8)).attr("stop-color","#dfdfdf").attr("stop-opacity",1),r.append("stop").attr("class","start").attr("offset",i(0)).attr("stop-color","#dfdfdf").attr("stop-opacity",1),r.append("stop").attr("class","start").attr("offset",i(.8)).attr("stop-color","#dfdfdf").attr("stop-opacity",1),r.append("stop").attr("class","start").attr("offset",i(1.6)).attr("stop-color","#ED94A3").attr("stop-opacity",1),r.append("stop").attr("class","start").attr("offset",i(2.4)).attr("stop-color",Cs).attr("stop-opacity",1)}(t,i,e.append("defs")),e.append("rect").attr("x",0).attr("y",t.padding.top).attr("width",t.innerWidth).attr("height",t.innerHeight-24).attr("fill","url(#linear-gradient)");var o=[{x:0,percentile:"0 "+r[3]},{x:i(-1.6),percentile:5},{x:i(-.8),percentile:20},{x:i(0),percentile:50},{x:i(.8),percentile:80},{x:i(1.6),percentile:95},{x:t.innerWidth,percentile:99}];(o=e.selectAll(".gradientplot-tick").data(o).enter().append("g").attr("class","axis-tick gradientplot-tick").attr("transform",(function(t){return`translate(${t.x},0)`}))).append("line").attr("x1",0).attr("x2",0).attr("y1",t.padding.top).attr("y2",-10).style("stroke","black").style("stroke-width",1),o.append("text").attr("x",0).attr("y",-20).html((function(t){return t.percentile})).attr("text-anchor",(function(t,e){return 0==e?"start":"middle"}));var a=function(){var t=va(Ia),e=va(64),n=null;function r(){var r;if(n||(n=r=Kn()),t.apply(this,arguments).draw(n,+e.apply(this,arguments)),r)return n=null,r+""||null}return r.type=function(e){return arguments.length?(t="function"==typeof e?e:va(e),r):t},r.size=function(t){return arguments.length?(e="function"==typeof t?t:va(+t),r):e},r.context=function(t){return arguments.length?(n=null==t?null:t,r):n},r}().type(Aa);o.filter((function(t){return 50==t.percentile})).append("path").attr("class","tick-triangle gradientplot-triangle").attr("id",(function(t){return"gradientplot-triangle-"+t.percentile})).attr("d",a).attr("fill","black").attr("transform",(function(t){return"translate(0,-40)rotate(-180)"})).attr("opacity",0),e.append("text").attr("x",i(-1.6)).attr("y",t.innerHeight).attr("text-anchor","middle").attr("class","plot-label gradientplot-label-riskbin").attr("id","gradientplot-label-riskbin-decreased").html(r[1]).attr("opacity",0),e.append("text").attr("x",i(0)).attr("y",t.innerHeight).attr("text-anchor","middle").attr("class","plot-label gradientplot-label-riskbin").attr("id","gradientplot-label-riskbin-average").html(r[0]).attr("opacity",0),e.append("text").attr("x",i(1.6)).attr("y",t.innerHeight).attr("text-anchor","middle").attr("class","plot-label gradientplot-label-riskbin").attr("id","gradientplot-label-riskbin-increased").html(r[2]).attr("opacity",0)}function Cl(t,e,n,r){e.selectAll("text").remove();const i=new wl(n,t.parentId,t.rootId,t.type,t.color,t.bins,t.size,t.width,t.height,t.padding);let o=e.selectAll(".column").data(i.flatData,(function(t){return""+t.x0}));o.exit().remove(),o.enter().append("path").attr("d","M16.9,10.3l-0.5,11.4c-0.1,1.3-1,2.3-2.3,2.4l0,0l-1.1,12.7c0,1.5-0.8,2.7-1.7,2.7H6.8c-0.9,0-1.7-1.2-1.7-2.7L4,24.1l0,0C2.7,24,1.7,23,1.7,21.7L1.1,10.3c0-1.3,1.2-2.1,2.7-2.1h2.7C5.4,7.5,4.7,6.2,4.8,4.8c0-2.4,1.9-4.3,4.3-4.3c2.4,0,4.3,1.9,4.3,4.3c0,1.4-0.7,2.7-1.8,3.5h2.6C15.6,8.2,16.9,9,16.9,10.3z").attr("fill",(function(t){return t.color})).attr("class","column").attr("transform",(function(t){return`translate(${t.x0+t.x},${t.y0+t.y})`})).merge(o).transition().duration(600).attr("transform",(function(t){return`translate(${t.x0+t.x},${t.y0+t.y})`})).attr("class","column").attr("fill",(function(t){return t.color})),e.append("text").attr("class","plot-label").attr("id","distribution-path-label-mostppl").attr("dy",24).attr("x",i.width/2).attr("y",(function(t){return i.padding.top-1.5*zt(this).attr("dy")})).attr("text-anchor","middle").html((function(){var t=zt(this).attr("x"),e=zt(this).attr("dy");return`<tspan x='${+t}' dy='0'>${r[0]}</tspan><tspan x='${+t}' dy='${+e}'>&#8595;</tspan>`})).attr("opacity",0)}let Il,Tl,kl,Al,El,$l,Sl,Nl,Rl;Es>=800?(kl=150,Al=0,El=40,Il=2.5*kl,Tl=1.5*kl):(kl=120,Al=0,El=30,Il=1*kl,Tl=.9*kl);var Dl={rootId:"ps-plot-wrapper",parentId:"psplot",width:ya(".plot-wrapper").node().clientWidth,height:ya(".plot-wrapper").node().clientHeight,scroll:{prog:0,counter:0,speed:.2},padding:{top:0,right:0,bottom:0,left:0}},Ul={rootId:"psplot-wrapper",parentId:"psplot",type:"gradientplot",width:ya(".plot-wrapper").node().clientWidth,height:kl,padding:{top:Al,right:0,bottom:El,left:0}},Ll={rootId:"psplot-wrapper",parentId:"psplot",type:"grid",color:"grey",width:ya(".plot-wrapper").node().clientWidth,height:ya(".plot-wrapper").node().clientHeight-Ul.height/2,padding:{top:Tl,right:0,bottom:El+40,left:0},bins:25,size:{width:20,height:40}},Pl={rootId:"psplot-wrapper",parentId:"psplot",type:"lattice",sceneId:"psplot-individual",width:ya(".plot-wrapper").node().clientWidth,height:.5*ya(".plot-wrapper").node().clientHeight,grid:{rows:1,columns:7},plotConfigs:{positions:80,padding:{top:0,right:0,bottom:10,left:0},type:"towerplot-pair",grid:{rows:void 0,columns:2},scale:{x:"",y:"",color:""},colorType:"greyRedTeal",opacityType:"effectSize",scroll:{prog:0,counter:0,speed:.2}},padding:{top:0,right:0,bottom:0,left:0}};function zl(t=Dl,e,n=Pl,r=Ll,i=Ul,o,a=!1){"espanol"==o?(Sl=["menor riesgo","Usted está en el","percentil 5","de la puntuación poligénica con","menor riesgo","genético"],Rl=["promedio","Usted está en el","percentil 50","de la puntuación poligénica con","promedio riesgo","genético"],Nl=["mayor riesgo","Usted está en el","percentil 95","de la puntuación poligénica con","mayor riesgo","genético"],$l=["&#8592; puntuación más baja","puntuación más alta &#8594;","riesgo promedio","menor riesgo","mayor riesgo","percentil","La mayoría de las personas","promedio"]):"english"==o&&($l=["&#8592; lower score","higher score &#8594;","average risk","decreased risk","increased risk","percentile","Most people","Average"],Sl=["significantly decreasd","You are in the","5th percentile","of the polygenic score with","significantly decreased","genetic risk"],Rl=["average","You are in the","50th percentile","of the polygenic score with","average","genetic risk"],Nl=["significantly increased","You are in the","95th percentile","of the polygenic score with","significantly increased","genetic risk"]),Fl(t),Fl(i),Fl(r);const s=t.parentId,l=document.getElementById(t.rootId+"-svg"),c=document.getElementById(`${t.rootId}-${s}`);let f;l?f=c?zt(`#${t.rootId}-${s}`).attr("transform",`translate(${t.padding.left}, ${t.padding.top})`):Hl(t,s):(!function(t){zt("#"+t.rootId).append("svg").attr("id",t.rootId+"-svg").attr("width",t.width).attr("height",t.height)}(t),f=c?zt(`#${t.parentId}-${s}`).attr("transform",`translate(${t.padding.left}, ${t.padding.top})`):Hl(t,s));var h=function(t){let e=[];for(let n=0;n<t;n++){let t=ws(),n={q:t,p:_s(t)};e.push(n)}return e.sort((function(t,e){return t.q-e.q})),e}(2e3).filter((function(t){return t.q<=2.4&&t.q>=-2.4}));let p=hi().range([0,t.innerWidth]).domain(u(h,(function(t){return t.q}))),d=f.append("g").attr("id",n.parentId+"-towerplot").attr("transform","translate(0,0)"),g=f.append("g").attr("id",r.parentId+"-areaplot").attr("transform","translate(0,0)"),y=f.append("g").attr("id",r.parentId+"-binplot").attr("transform","translate(0,0)"),v=f.append("g").attr("id",i.parentId+"-gradientplot").attr("transform",`translate(0,${t.height-i.height})`);f.append("text").html($l[0]).attr("class",`plot-label ${t.parentId}-label`).attr("text-anchor","start").attr("x",0).attr("y",-30).attr("opacity",0),f.append("text").html($l[1]).attr("class",`plot-label ${t.parentId}-label`).attr("text-anchor","end").attr("x",t.innerWidth).attr("y",-30).attr("opacity",0),function(t,e,n,r){const i=new wl(n,t.parentId,t.rootId,t.type,t.color,t.bins,t.size,t.width,t.height,t.padding,t.colorType);var o=ba().x((function(t){return i.scale.q(t.q)})).y0(t=>i.height).y1((function(t){return i.scale.p(t.p)})).curve(La);e.selectAll(".distribution-path").remove(),e.selectAll("text").remove(),e.append("path").datum(n).attr("class","distribution-path").attr("id","distribution-path").attr("d",o).attr("fill","#dfdfdf")}(r,g,h,$l[7]),console.log($l),Ml(i,v,h,[$l[2],$l[3],$l[4],$l[5]]),zt(`#${i.parentId}-gradientplot`).attr("opacity",0),zt(`#${r.parentId}-areaplot`).attr("opacity",0),bl(t,f,p(0)+100,0,Rl),function(t,e,n,r,i,o,a,s,l,u,c){Ws("pscalc-individual-pair").on("enter",(function(t){zt("#psplot-plot-0-3").select("path").remove(),e.grid.columns=7,e.sceneId="psplot-individual",e.plotConfigs.type="towerplot-pair",xl(e,o,u,void 0)})).addTo($s),Ws("pscalc-individual-stack").on("enter",(function(t){zt("#psplot-plot-0-3").select("path").remove(),e.grid.columns=7,e.sceneId="psplot-individual",e.plotConfigs.type="towerplot-stack",xl(e,o,u,void 0)})).on("progress",(function(t){zt("#ps-flag").style("opacity",Hs(t.progress)),zt("#gradientplot-triangle-50").style("opacity",Hs(t.progress)),ya(".gradientplot-tick").attr("opacity",Hs(t.progress)),ya(".gradientplot-label-riskbin").attr("opacity",Hs(t.progress)),zt("#psplot-gradientplot").attr("opacity",Hs(t.progress))})).addTo($s),Ws("pscalc-population-pair").on("enter",(function(t){zt("#psplot-plot-0-3").select("path").remove(),e.grid.columns=25,e.sceneId="psplot-population",e.plotConfigs.type="towerplot-pair",xl(e,o,u,void 0),r.color="grey",Cl(r,s,c,$l[6])})).on("progress",(function(t){zt(`#${r.parentId}-binplot`).attr("opacity",Us(t.progress))})).addTo($s),Ws("pscalc-population-stack").on("enter",(function(t){e.grid.columns=25,e.sceneId="psplot-population",e.plotConfigs.type="towerplot-stack",xl(e,o,u,void 0),r.padding.top=Il,r.type="grid",r.color="grey",r.bins=25,Cl(r,s,c,[$l[6]])})).on("progress",(function(e){ya(`.${t.parentId}-label`).attr("opacity",Us(e.progress))})).addTo($s),Ws("pscalc-population-average").on("enter",(function(t){r.padding.top=Il,r.type="distribution",r.color="grey",Cl(r,s,c,[$l[7]])})).on("progress",(function(t){zt("#psplot-gradientplot").attr("opacity",Us(t.progress)),zt("#gradientplot-label-riskbin-average").attr("opacity",Ls(t.progress))})).addTo($s),Ws("pscalc-population-increase").on("enter",(function(t){r.padding.top=Il,r.type="distribution",r.color="red",Cl(r,s,c,[$l[6]])})).on("progress",(function(t){zt("#gradientplot-label-riskbin-increased").attr("opacity",Ls(t.progress))})).addTo($s),Ws("pscalc-population-decrease").on("enter",(function(t){r.padding.top=Il,r.bins=25,r.type="distribution",r.color="redteal",Cl(r,s,c,[$l[6]])})).on("progress",(function(n){i.select("#gradientplot-label-riskbin-decreased").attr("opacity",Us(n.progress)),i.selectAll(`.${t.parentId}-label`).attr("opacity",Fs(n.progress)),zt(`#${e.parentId}-towerplot`).attr("opacity",Fs(n.progress))})).addTo($s),Ws("psinterp-distribution-average").on("enter",(function(e){r.padding.top=Tl,r.bins=40,r.type="distribution",r.color="redteal",Cl(r,s,c,[$l[6]]),bl(t,i,l(0)+100,0,Rl)})).on("progress",(function(t){zt("#distribution-path-label-mostppl").attr("opacity",Ps(t.progress))})).addTo($s),Ws("psinterp-distribution-increased").on("enter",(function(e){bl(t,i,l(1.6),300,Nl)})).on("progress",(function(t){zt(`#${r.parentId}-binplot`).attr("opacity",zs(t.progress)),ya(".gradientplot-tick").attr("opacity",Ps(t.progress)),zt("#ps-flag").style("opacity",Ps(t.progress)),zt("#flag-line").style("opacity",Ps(t.progress)),zt(`#${r.parentId}-areaplot`).attr("opacity",Ps(t.progress))})).addTo($s),Ws("psinterp-distribution-decreased").on("enter",(function(e){bl(t,i,l(-1.6),0,Sl)})).on("progress",(function(t){zt("#ps-flag").style("opacity",Ps(t.progress)),zt("#flag-line").style("opacity",Ps(t.progress)),zt("#distribution-path-label-decreased").attr("opacity",Hs(t.progress))})).addTo($s)}(t,n,0,r,f,d,0,y,p,e,h)}function Fl(t){return t.innerHeight=t.height-t.padding.top-t.padding.bottom,t.innerWidth=t.width-t.padding.left-t.padding.right,t}function Hl(t,e){return zt(`#${t.rootId}-svg`).append("g").attr("id",`${t.rootId}-${e}`).attr("transform",`translate(${t.padding.left}, ${t.padding.top})`)}function Ol(t,e){e=-e;const n=document.getElementById(t).getBoundingClientRect().top+window.pageYOffset+e;window.scrollTo({top:n,behavior:"smooth"})}function ql(t){new bs.Scene({triggerElement:`#${t}-section`,triggerHook:.8,duration:zt(`#${t}-section`).node().clientHeight}).on("progress",(function(){ya(".nav-option").classed("active-nav-option",!1),ya(".nav-home").classed("active-nav-option",!1),zt(`#${t}-nav`).classed("active-nav-option",!0)})).addTo($s)}function Wl(t){Promise.all([_r(t.risk,(function(t){return{risk:+t.RelativeRisk,percentile:+t.Percentile}}))]).then(e=>{!function(t,e){new bs.Scene({triggerElement:"#variant-scroll-wrapper",triggerHook:.15,duration:zt("#variant-scroll-wrapper").node().clientHeight-As}).setPin("#variant-plot-wrapper").addTo($s),new bs.Scene({triggerElement:"#riskvariant-scroll-wrapper",triggerHook:.15,duration:zt("#riskvariant-scroll-wrapper").node().clientHeight-As}).setPin("#riskvariant-plot-wrapper").addTo($s),new bs.Scene({triggerElement:"#pscalc-scroll-wrapper",triggerHook:.15,duration:zt("#pscalc-scroll-wrapper").node().clientHeight-As}).setPin("#ps-plot-wrapper").addTo($s),ql("intro-to-polygenic-scores"),ql("genetic-variation"),ql("riskvariant"),ql("pscalc"),ql("psinterp"),ql("psapp"),ql("dnadestiny"),document.getElementById("intro-to-polygenic-scores-nav").onclick=function(){Ol("intro-to-polygenic-scores-section",50)},document.getElementById("genetic-variation-nav").onclick=function(){Ol("variant-scroll-wrapper",150)},document.getElementById("riskvariant-nav").onclick=function(){Ol("riskvariant-scroll-wrapper",150)},document.getElementById("pscalc-nav").onclick=function(){Ol("pscalc-scroll-wrapper",150)},document.getElementById("psinterp-nav").onclick=function(){Ol("psinterp-section",150)},document.getElementById("psapp-nav").onclick=function(){Ol("psapp-section",50)},document.getElementById("dnadestiny-nav").onclick=function(){Ol("dnadestiny-section",50)},il(void 0,Array.from(t).filter((t,e)=>t.percentile<=1),e),gl(void 0,void 0,Array.from(t).filter((t,e)=>t.percentile>=20&&t.percentile<=22),e),ml(void 0,void 0,Es>=800?Array.from(t).filter((t,e)=>t.percentile<=9||t.percentile>=89):Array.from(t).filter((t,e)=>t.percentile<=5||t.percentile>=95),e),zl(void 0,Array.from(t),void 0,void 0,void 0,e)}(xs({associated:20,non_associated:60,positions:80},{risk:e[0]}.risk,void 0),t.language)})}n.d(e,"createDataPromises",(function(){return Wl}))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,